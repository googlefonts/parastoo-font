{
.appVersion = "3343";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = "    ";
},
{
name = panose;
value = (
2,
11,
6,
3,
3,
8,
4,
2,
2,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
13,
31,
63,
67
);
},
{
name = fsType;
value = (
);
}
);
date = "2015-05-17 08:12:36 +0000";
familyName = Parastoo;
featurePrefixes = (
{
code = "lookup SUB_0 {
	lookupflag RightToLeft IgnoreMarks;
	sub uniFBFD by uniFBFD.compact;
	sub uniFE8A by uniFE8A.compact;
	sub uniFEF0 by uniFBFD.compact;
	sub uniFEF2 by uniFEF2.compact;
	sub uni06CE.fina by uni06CE.fina.compact;
} SUB_0;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_1 {
	lookupflag RightToLeft IgnoreMarks;
	sub uni0622 by uniFE82;
	sub uni0623 by uniFE84;
	sub uni0624 by uniFE86;
	sub uni0625 by uniFE88;
	sub uni0626 by uniFE8A;
	sub uni0627 by uniFE8E;
	sub uni0628 by uniFE90;
	sub uni0629 by uniFE94;
	sub uni062A by uniFE96;
	sub uni062B by uniFE9A;
	sub uni062C by uniFE9E;
	sub uni062D by uniFEA2;
	sub uni062E by uniFEA6;
	sub uni062F by uniFEAA;
	sub uni0630 by uniFEAC;
	sub uni0631 by uniFEAE;
	sub uni0632 by uniFEB0;
	sub uni0633 by uniFEB2;
	sub uni0634 by uniFEB6;
	sub uni0635 by uniFEBA;
	sub uni0636 by uniFEBE;
	sub uni0637 by uniFEC2;
	sub uni0638 by uniFEC6;
	sub uni0639 by uniFECA;
	sub uni063A by uniFECE;
	sub uni0641 by uniFED2;
	sub uni0642 by uniFED6;
	sub uni0643 by uniFEDA;
	sub uni0644 by uniFEDE;
	sub uni0645 by uniFEE2;
	sub uni0646 by uniFEE6;
	sub uni0647 by uniFEEA;
	sub uni0648 by uniFEEE;
	sub uni0649 by uniFEF0;
	sub uni064A by uniFEF2;
	sub uni066E by uni066E.fina;
	sub uni066F by uni066F.fina;
	sub uni067E by uniFB57;
	sub uni0686 by uniFB7B;
	sub uni0695 by uni0695.fina;
	sub uni0698 by uniFB8B;
	sub uni06A1 by uni06A1.fina;
	sub uni06A4 by uniFB6B;
	sub uni06A9 by uniFB8F;
	sub uni06AF by uniFB93;
	sub uni06B5 by uni06B5.fina;
	sub uni06BA by uniFB9F;
	sub uni06BE by uniFEEC;
	sub uni06C0 by uniFBA5.fina;
	sub uni06C6 by uniFBDA;
	sub uni06CA by uni06CA.fina;
	sub uni06CC by uniFBFD;
	sub uni06CE by uni06CE.fina;
	sub uni06D5 by uni06D5.fina;
} SUB_1;
script arab;
language dflt;
lookup SUB_1;
language FAR;
lookup SUB_1;
language KUR;
lookup SUB_1;
language URD;
lookup SUB_1;
";
tag = fina;
},
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	lookupflag RightToLeft IgnoreMarks;
	sub uni0626 by uniFE8C;
	sub uni0628 by uniFE92;
	sub uni062A by uniFE98;
	sub uni062B by uniFE9C;
	sub uni062C by uniFEA0;
	sub uni062D by uniFEA4;
	sub uni062E by uniFEA8;
	sub uni0633 by uniFEB4;
	sub uni0634 by uniFEB8;
	sub uni0635 by uniFEBC;
	sub uni0636 by uniFEC0;
	sub uni0637 by uniFEC4;
	sub uni0638 by uniFEC8;
	sub uni0639 by uniFECC;
	sub uni063A by uniFED0;
	sub uni0641 by uniFED4;
	sub uni0642 by uniFED8;
	sub uni0643 by uniFEDC;
	sub uni0644 by uniFEE0;
	sub uni0645 by uniFEE4;
	sub uni0646 by uniFEE8;
	sub uni0647 by uniFEEC;
	sub uni0649 by uniFBE9;
	sub uni064A by uniFEF4;
	sub uni067E by uniFB59;
	sub uni0686 by uniFB7D;
	sub uni06A1 by uni06A1.medi;
	sub uni06A4 by uniFB6D;
	sub uni06A9 by uniFB91;
	sub uni06AF by uniFB95;
	sub uni06B5 by uni06B5.medi;
	sub uni06BE by uniFEEC;
	sub uni06CC by uniFBFF;
	sub uni06CE by uni06CE.medi;
} SUB_2;
script arab;
language dflt;
lookup SUB_2;
language FAR;
lookup SUB_2;
language KUR;
lookup SUB_2;
language URD;
lookup SUB_2;
";
tag = medi;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 {
	lookupflag RightToLeft IgnoreMarks;
	sub uni0626 by uniFE8B;
	sub uni0628 by uniFE91;
	sub uni062A by uniFE97;
	sub uni062B by uniFE9B;
	sub uni062C by uniFE9F;
	sub uni062D by uniFEA3;
	sub uni062E by uniFEA7;
	sub uni0633 by uniFEB3;
	sub uni0634 by uniFEB7;
	sub uni0635 by uniFEBB;
	sub uni0636 by uniFEBF;
	sub uni0637 by uniFEC3;
	sub uni0638 by uniFEC7;
	sub uni0639 by uniFECB;
	sub uni063A by uniFECF;
	sub uni0641 by uniFED3;
	sub uni0642 by uniFED7;
	sub uni0643 by uniFEDB;
	sub uni0644 by uniFEDF;
	sub uni0645 by uniFEE3;
	sub uni0646 by uniFEE7;
	sub uni0647 by uniFEEB;
	sub uni0649 by uniFBE8;
	sub uni064A by uniFEF3;
	sub uni067E by uniFB58;
	sub uni0686 by uniFB7C;
	sub uni06A1 by uni06A1.init;
	sub uni06A4 by uniFB6C;
	sub uni06A9 by uniFB90;
	sub uni06AF by uniFB94;
	sub uni06B5 by uni06B5.init;
	sub uni06BE by uniFEEB;
	sub uni06CC by uniFBFE;
	sub uni06CE by uni06CE.init;
} SUB_3;
script arab;
language dflt;
lookup SUB_3;
language FAR;
lookup SUB_3;
language KUR;
lookup SUB_3;
language URD;
lookup SUB_3;
";
tag = init;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	lookupflag RightToLeft;
	sub uni064B uni0651 by uni0651064B;
	sub uni064C uni0651 by uni0651064C;
	sub uni064E uni0654 by uni0654064E;
	sub uni064E uni0651 by uni0651064E;
	sub uni064F uni0654 by uni0654064F;
	sub uni064F uni0651 by uni0651064F;
	sub uni0651 uni064F by uni0651064F;
	sub uni0651 uni064E by uni0651064E;
	sub uni0651 uni064C by uni0651064C;
	sub uni0651 uni064B by uni0651064B;
	sub uni0654 uni064F by uni0654064F;
	sub uni0654 uni064E by uni0654064E;
} SUB_4;
lookup SUB_5 {
	lookupflag RightToLeft IgnoreMarks;
	sub uniFEDF uniFE8E by uniFEFB;
	sub uniFEE0 uniFE8E by uniFEFC;
	sub uni06B5.init uniFE8E by lamVabove_alef.isol;
	sub uni06B5.medi uniFE8E by NameMe.65574;
} SUB_5;
lookup SUB_6 {
	lookupflag RightToLeft;
	sub uni064D uni0651 by uni064B0651;
	sub uni0650 uni0651 by uni064E0651;
	sub uni0651 uni0650 by uni064E0651;
	sub uni0651 uni064D by uni064B0651;
} SUB_6;
script arab;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6;
language FAR;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6;
language KUR;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6;
language URD;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6;
";
tag = rlig;
},
{
code = "script DFLT;
language dflt;
lookup SUB_7 {
	lookupflag RightToLeft IgnoreMarks;
	@SUB_7_0_BT_0 = [uniFB7C uniFB7D uniFB90 uniFB91 uniFB94 uniFB95 uniFE8B uniFE8C uniFE97 uniFE98 uniFE9B uniFE9C uniFE9F uniFEA0 uniFEA3 uniFEA4 uniFEA7 uniFEA8 uniFEB3 uniFEB4 uniFEB7 uniFEB8 uniFEBB uniFEBC uniFEBF uniFEC0 uniFEC3 uniFEC4 uniFEC7 uniFECB uniFECC uniFECF uniFED0 uniFED3 uniFED4 uniFED7 uniFED8 uniFEDB uniFEDC uniFEDF uniFEE0 uniFEE3 uniFEE4 uniFEE7 uniFEE8 uniFEEB uniFEEC];
	@SUB_7_0_1 = [uniFBFD uniFE8A uniFEF0 uniFEF2 uni06CE.fina];
	sub @SUB_7_0_BT_0 @SUB_7_0_1' lookup SUB_0;
} SUB_7;
script arab;
language dflt;
lookup SUB_7;
language FAR;
lookup SUB_7;
language KUR;
lookup SUB_7;
language URD;
lookup SUB_7;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	lookupflag RightToLeft IgnoreMarks;
	sub uniFEDF uniFE88 by uniFEF9;
	sub uniFEDF uniFE84 by uniFEF7;
	sub uniFEDF uniFE82 by uniFEF5;
	sub uniFEE0 uniFE88 by uniFEFA;
	sub uniFEE0 uniFE84 by uniFEF8;
	sub uniFEE0 uniFE82 by uniFEF6;
} SUB_8;
lookup SUB_9 {
	lookupflag RightToLeft;
	sub space uni0652 by uniFE7E;
	sub space uni0651 by uniFE7C;
	sub space uni0650 by uniFE7A;
	sub space uni064F by uniFE78;
	sub space uni064E by uniFE76;
	sub space uni064D by uniFE74;
	sub space uni064C by uniFE72;
	sub space uni064B by uniFE70;
	sub uni0627 uniFEDF uniFEE0 uniFEEA by uniFDF2;
	sub uni0627 uni0655 by uni0625;
	sub uni0627 uni0654 by uni0623;
	sub uni0627 uni0653 by uni0622;
	sub uni0640 uni0652 by uniFE7F;
	sub uni0640 uni0651 by uniFE7D;
	sub uni0640 uni0650 by uniFE7B;
	sub uni0640 uni064F by uniFE79;
	sub uni0640 uni064E by uniFE77;
	sub uni0640 uni064B by uniFE71;
	sub uni0647 uni0654 by uni06C0;
	sub uni0648 uni0654 by uni0624;
	sub uni064A uni0654 by uni0626;
	sub uniFEEA uni0654 by uniFBA5.fina;
} SUB_9;
script arab;
language dflt;
lookup SUB_8;
lookup SUB_9;
language FAR;
lookup SUB_8;
lookup SUB_9;
language KUR;
lookup SUB_8;
lookup SUB_9;
language URD;
lookup SUB_8;
lookup SUB_9;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup POS_1 {
	lookupflag RightToLeft;
} POS_1;
lookup POS_2 {
	lookupflag RightToLeft;
	markClass uni0615 <anchor 767 2009> @POS_2_0_MARK_0;
	markClass uni064B <anchor 583 1123> @POS_2_0_MARK_0;
	markClass uni064C <anchor 680 1278> @POS_2_0_MARK_0;
	markClass uni064E <anchor 545 1397> @POS_2_0_MARK_0;
	markClass uni064F <anchor 591 1359> @POS_2_0_MARK_0;
	markClass uni0651 <anchor 595 1445> @POS_2_0_MARK_0;
	markClass uni0652 <anchor 609 1271> @POS_2_0_MARK_0;
	markClass uni0653 <anchor 485 1566> @POS_2_0_MARK_0;
	markClass uni0654 <anchor 672 1684> @POS_2_0_MARK_0;
	markClass uni0657 <anchor 513 1400> @POS_2_0_MARK_0;
	markClass uni065A <anchor 573 1350> @POS_2_0_MARK_0;
	markClass uni0670 <anchor 768 1776> @POS_2_0_MARK_0;
	markClass uni0651064B <anchor 612 928> @POS_2_0_MARK_0;
	markClass uni0651064C <anchor 627 900> @POS_2_0_MARK_0;
	markClass uni064B0651 <anchor 549 936> @POS_2_0_MARK_0;
	markClass uni0651064E <anchor 618 1138> @POS_2_0_MARK_0;
	markClass uni0651064F <anchor 620 933> @POS_2_0_MARK_0;
	markClass uni064E0651 <anchor 618 1055> @POS_2_0_MARK_0;
	markClass uni0654064E <anchor 637 1186> @POS_2_0_MARK_0;
	markClass uni0654064F <anchor 456 956> @POS_2_0_MARK_0;
	pos base uni0621 <anchor 409 1057> mark @POS_2_0_MARK_0;
	pos base uni0622 <anchor 269 1794> mark @POS_2_0_MARK_0;
	pos base uni0623 <anchor 205 2011> mark @POS_2_0_MARK_0;
	pos base uni0624 <anchor 412 1433> mark @POS_2_0_MARK_0;
	pos base uni0625 <anchor 218 1635> mark @POS_2_0_MARK_0;
	pos base uni0626 <anchor 551 1155> mark @POS_2_0_MARK_0;
	pos base uni0627 <anchor 206 1624> mark @POS_2_0_MARK_0;
	pos base uni0628 <anchor 890 1022> mark @POS_2_0_MARK_0;
	pos base uni0629 <anchor 381 1405> mark @POS_2_0_MARK_0;
	pos base uni062A <anchor 903 1171> mark @POS_2_0_MARK_0;
	pos base uni062B <anchor 898 1294> mark @POS_2_0_MARK_0;
	pos base uni062C <anchor 602 1120> mark @POS_2_0_MARK_0;
	pos base uni062D <anchor 597 1120> mark @POS_2_0_MARK_0;
	pos base uni062E <anchor 606 1467> mark @POS_2_0_MARK_0;
	pos base uni062F <anchor 475 1230> mark @POS_2_0_MARK_0;
	pos base uni0630 <anchor 458 1603> mark @POS_2_0_MARK_0;
	pos base uni0631 <anchor 488 933> mark @POS_2_0_MARK_0;
	pos base uni0632 <anchor 441 1266> mark @POS_2_0_MARK_0;
	pos base uni0633 <anchor 1683 1043> mark @POS_2_0_MARK_0;
	pos base uni0634 <anchor 1637 1410> mark @POS_2_0_MARK_0;
	pos base uni0635 <anchor 2047 1235> mark @POS_2_0_MARK_0;
	pos base uni0636 <anchor 2037 1484> mark @POS_2_0_MARK_0;
	pos base uni0637 <anchor 549 1634> mark @POS_2_0_MARK_0;
	pos base uni0638 <anchor 558 1634> mark @POS_2_0_MARK_0;
	pos base uni0639 <anchor 695 1390> mark @POS_2_0_MARK_0;
	pos base uni063A <anchor 659 1671> mark @POS_2_0_MARK_0;
	pos base uni0640 <anchor 149 1371> mark @POS_2_0_MARK_0;
	pos base uni0641 <anchor 1317 1583> mark @POS_2_0_MARK_0;
	pos base uni0642 <anchor 927 1320> mark @POS_2_0_MARK_0;
	pos base uni0643 <anchor 969 1412> mark @POS_2_0_MARK_0;
	pos base uni0644 <anchor 596 1034> mark @POS_2_0_MARK_0;
	pos base uni0645 <anchor 583 1033> mark @POS_2_0_MARK_0;
	pos base uni0646 <anchor 642 996> mark @POS_2_0_MARK_0;
	pos base uni0647 <anchor 340 1041> mark @POS_2_0_MARK_0;
	pos base uni0648 <anchor 414 1030> mark @POS_2_0_MARK_0;
	pos base uni0649 <anchor 659 869> mark @POS_2_0_MARK_0;
	pos base uni064A <anchor 657 825> mark @POS_2_0_MARK_0;
	pos base uni066E <anchor 686 1289> mark @POS_2_0_MARK_0;
	pos base uni066F <anchor 581 1182> mark @POS_2_0_MARK_0;
	pos base uni067E <anchor 890 1022> mark @POS_2_0_MARK_0;
	pos base uni0686 <anchor 602 1120> mark @POS_2_0_MARK_0;
	pos base uni0698 <anchor 435 1442> mark @POS_2_0_MARK_0;
	pos base uni06A1 <anchor 772 1469> mark @POS_2_0_MARK_0;
	pos base uni06A9 <anchor 1211 1452> mark @POS_2_0_MARK_0;
	pos base uni06AF <anchor 1336 1586> mark @POS_2_0_MARK_0;
	pos base uni06BE <anchor 567 1610> mark @POS_2_0_MARK_0;
	pos base uni06C0 <anchor 407 1724> mark @POS_2_0_MARK_0;
	pos base uni06CA <anchor 390 1272> mark @POS_2_0_MARK_0;
	pos base uni06CC <anchor 649 869> mark @POS_2_0_MARK_0;
	pos base uni06D5 <anchor 414 1472> mark @POS_2_0_MARK_0;
	pos base uniFB56 <anchor 890 1022> mark @POS_2_0_MARK_0;
	pos base uniFB57 <anchor 890 1022> mark @POS_2_0_MARK_0;
	pos base uniFB58 <anchor 314 1063> mark @POS_2_0_MARK_0;
	pos base uniFB59 <anchor 351 933> mark @POS_2_0_MARK_0;
	pos base uniFB7A <anchor 602 1120> mark @POS_2_0_MARK_0;
	pos base uniFB7B <anchor 602 1120> mark @POS_2_0_MARK_0;
	pos base uniFB7C <anchor 574 1175> mark @POS_2_0_MARK_0;
	pos base uniFB7D <anchor 574 1175> mark @POS_2_0_MARK_0;
	pos base uniFB8A <anchor 428 1407> mark @POS_2_0_MARK_0;
	pos base uniFB8B <anchor 476 1327> mark @POS_2_0_MARK_0;
	pos base uniFB8E <anchor 1198 1444> mark @POS_2_0_MARK_0;
	pos base uniFB8F <anchor 1195 1454> mark @POS_2_0_MARK_0;
	pos base uniFB90 <anchor 183 1443> mark @POS_2_0_MARK_0;
	pos base uniFB91 <anchor 183 1443> mark @POS_2_0_MARK_0;
	pos base uniFB92 <anchor 1303 1591> mark @POS_2_0_MARK_0;
	pos base uniFB93 <anchor 1317 1561> mark @POS_2_0_MARK_0;
	pos base uniFB94 <anchor 290 1565> mark @POS_2_0_MARK_0;
	pos base uniFB95 <anchor 290 1565> mark @POS_2_0_MARK_0;
	pos base uniFB9E <anchor 626 1046> mark @POS_2_0_MARK_0;
	pos base uniFB9F <anchor 564 1020> mark @POS_2_0_MARK_0;
	pos base uniFBA5.fina <anchor 423 1822> mark @POS_2_0_MARK_0;
	pos base uniFBAC <anchor 609 1222> mark @POS_2_0_MARK_0;
	pos base uniFBAD <anchor 541 1135> mark @POS_2_0_MARK_0;
	pos base uniFBE8 <anchor 328 1291> mark @POS_2_0_MARK_0;
	pos base uniFBE9 <anchor 403 1177> mark @POS_2_0_MARK_0;
	pos base uniFBFC <anchor 664 861> mark @POS_2_0_MARK_0;
	pos base uniFBFD <anchor 723 587> mark @POS_2_0_MARK_0;
	pos base uniFBFE <anchor 327 1047> mark @POS_2_0_MARK_0;
	pos base uniFBFF <anchor 351 933> mark @POS_2_0_MARK_0;
	pos base uniFE70 <anchor 418 1631> mark @POS_2_0_MARK_0;
	pos base uniFE71 <anchor 397 1625> mark @POS_2_0_MARK_0;
	pos base uniFE72 <anchor 424 1625> mark @POS_2_0_MARK_0;
	pos base uniFE73 <anchor 369 1242> mark @POS_2_0_MARK_0;
	pos base uniFE74 <anchor 385 1535> mark @POS_2_0_MARK_0;
	pos base uniFE76 <anchor 403 1602> mark @POS_2_0_MARK_0;
	pos base uniFE77 <anchor 412 1593> mark @POS_2_0_MARK_0;
	pos base uniFE78 <anchor 409 1613> mark @POS_2_0_MARK_0;
	pos base uniFE79 <anchor 424 1616> mark @POS_2_0_MARK_0;
	pos base uniFE7A <anchor 385 1535> mark @POS_2_0_MARK_0;
	pos base uniFE7B <anchor 385 1535> mark @POS_2_0_MARK_0;
	pos base uniFE7C <anchor 376 1657> mark @POS_2_0_MARK_0;
	pos base uniFE7D <anchor 397 1624> mark @POS_2_0_MARK_0;
	pos base uniFE7E <anchor 403 1610> mark @POS_2_0_MARK_0;
	pos base uniFE7F <anchor 382 1715> mark @POS_2_0_MARK_0;
	pos base uniFE80 <anchor 438 1229> mark @POS_2_0_MARK_0;
	pos base uniFE81 <anchor 267 1781> mark @POS_2_0_MARK_0;
	pos base uniFE82 <anchor 272 1769> mark @POS_2_0_MARK_0;
	pos base uniFE83 <anchor 205 2021> mark @POS_2_0_MARK_0;
	pos base uniFE84 <anchor 205 2011> mark @POS_2_0_MARK_0;
	pos base uniFE85 <anchor 412 1433> mark @POS_2_0_MARK_0;
	pos base uniFE86 <anchor 412 1433> mark @POS_2_0_MARK_0;
	pos base uniFE87 <anchor 217 1644> mark @POS_2_0_MARK_0;
	pos base uniFE88 <anchor 212 1642> mark @POS_2_0_MARK_0;
	pos base uniFE89 <anchor 550 1122> mark @POS_2_0_MARK_0;
	pos base uniFE8A <anchor 621 1028> mark @POS_2_0_MARK_0;
	pos base uniFE8B <anchor 333 1502> mark @POS_2_0_MARK_0;
	pos base uniFE8C <anchor 399 1326> mark @POS_2_0_MARK_0;
	pos base uniFE8D <anchor 252 1778> mark @POS_2_0_MARK_0;
	pos base uniFE8E <anchor 187 1630> mark @POS_2_0_MARK_0;
	pos base uniFE8F <anchor 815 1196> mark @POS_2_0_MARK_0;
	pos base uniFE90 <anchor 890 1022> mark @POS_2_0_MARK_0;
	pos base uniFE91 <anchor 314 1063> mark @POS_2_0_MARK_0;
	pos base uniFE92 <anchor 370 980> mark @POS_2_0_MARK_0;
	pos base uniFE93 <anchor 375 1491> mark @POS_2_0_MARK_0;
	pos base uniFE94 <anchor 543 1608> mark @POS_2_0_MARK_0;
	pos base uniFE95 <anchor 895 1144> mark @POS_2_0_MARK_0;
	pos base uniFE96 <anchor 919 1180> mark @POS_2_0_MARK_0;
	pos base uniFE97 <anchor 280 1352> mark @POS_2_0_MARK_0;
	pos base uniFE98 <anchor 355 1266> mark @POS_2_0_MARK_0;
	pos base uniFE99 <anchor 880 1299> mark @POS_2_0_MARK_0;
	pos base uniFE9A <anchor 939 1310> mark @POS_2_0_MARK_0;
	pos base uniFE9B <anchor 307 1494> mark @POS_2_0_MARK_0;
	pos base uniFE9C <anchor 355 1370> mark @POS_2_0_MARK_0;
	pos base uniFE9D <anchor 602 1120> mark @POS_2_0_MARK_0;
	pos base uniFE9E <anchor 602 1120> mark @POS_2_0_MARK_0;
	pos base uniFE9F <anchor 574 1175> mark @POS_2_0_MARK_0;
	pos base uniFEA0 <anchor 574 1175> mark @POS_2_0_MARK_0;
	pos base uniFEA1 <anchor 602 1120> mark @POS_2_0_MARK_0;
	pos base uniFEA2 <anchor 597 1120> mark @POS_2_0_MARK_0;
	pos base uniFEA3 <anchor 574 1175> mark @POS_2_0_MARK_0;
	pos base uniFEA4 <anchor 574 1175> mark @POS_2_0_MARK_0;
	pos base uniFEA5 <anchor 596 1447> mark @POS_2_0_MARK_0;
	pos base uniFEA6 <anchor 606 1467> mark @POS_2_0_MARK_0;
	pos base uniFEA7 <anchor 608 1464> mark @POS_2_0_MARK_0;
	pos base uniFEA8 <anchor 608 1464> mark @POS_2_0_MARK_0;
	pos base uniFEA9 <anchor 488 1291> mark @POS_2_0_MARK_0;
	pos base uniFEAA <anchor 667 1254> mark @POS_2_0_MARK_0;
	pos base uniFEAB <anchor 345 1889> mark @POS_2_0_MARK_0;
	pos base uniFEAC <anchor 596 1601> mark @POS_2_0_MARK_0;
	pos base uniFEAD <anchor 468 1165> mark @POS_2_0_MARK_0;
	pos base uniFEAE <anchor 530 897> mark @POS_2_0_MARK_0;
	pos base uniFEAF <anchor 434 1467> mark @POS_2_0_MARK_0;
	pos base uniFEB0 <anchor 505 1223> mark @POS_2_0_MARK_0;
	pos base uniFEB1 <anchor 1644 980> mark @POS_2_0_MARK_0;
	pos base uniFEB2 <anchor 1697 1031> mark @POS_2_0_MARK_0;
	pos base uniFEB3 <anchor 931 1043> mark @POS_2_0_MARK_0;
	pos base uniFEB4 <anchor 931 1039> mark @POS_2_0_MARK_0;
	pos base uniFEB5 <anchor 1623 1418> mark @POS_2_0_MARK_0;
	pos base uniFEB6 <anchor 1637 1410> mark @POS_2_0_MARK_0;
	pos base uniFEB7 <anchor 899 1414> mark @POS_2_0_MARK_0;
	pos base uniFEB8 <anchor 899 1417> mark @POS_2_0_MARK_0;
	pos base uniFEB9 <anchor 2021 1174> mark @POS_2_0_MARK_0;
	pos base uniFEBA <anchor 2047 1235> mark @POS_2_0_MARK_0;
	pos base uniFEBB <anchor 1286 1258> mark @POS_2_0_MARK_0;
	pos base uniFEBC <anchor 1286 1258> mark @POS_2_0_MARK_0;
	pos base uniFEBD <anchor 2032 1478> mark @POS_2_0_MARK_0;
	pos base uniFEBE <anchor 2034 1478> mark @POS_2_0_MARK_0;
	pos base uniFEBF <anchor 1308 1487> mark @POS_2_0_MARK_0;
	pos base uniFEC0 <anchor 1308 1487> mark @POS_2_0_MARK_0;
	pos base uniFEC1 <anchor 558 1634> mark @POS_2_0_MARK_0;
	pos base uniFEC2 <anchor 568 1634> mark @POS_2_0_MARK_0;
	pos base uniFEC3 <anchor 268 1637> mark @POS_2_0_MARK_0;
	pos base uniFEC4 <anchor 268 1637> mark @POS_2_0_MARK_0;
	pos base uniFEC5 <anchor 558 1634> mark @POS_2_0_MARK_0;
	pos base uniFEC6 <anchor 558 1634> mark @POS_2_0_MARK_0;
	pos base uniFEC7 <anchor 268 1637> mark @POS_2_0_MARK_0;
	pos base uniFEC8 <anchor 268 1637> mark @POS_2_0_MARK_0;
	pos base uniFEC9 <anchor 660 1397> mark @POS_2_0_MARK_0;
	pos base uniFECA <anchor 711 1126> mark @POS_2_0_MARK_0;
	pos base uniFECB <anchor 560 1193> mark @POS_2_0_MARK_0;
	pos base uniFECC <anchor 553 1082> mark @POS_2_0_MARK_0;
	pos base uniFECD <anchor 575 1973> mark @POS_2_0_MARK_0;
	pos base uniFECE <anchor 695 1508> mark @POS_2_0_MARK_0;
	pos base uniFECF <anchor 559 1538> mark @POS_2_0_MARK_0;
	pos base uniFED0 <anchor 556 1353> mark @POS_2_0_MARK_0;
	pos base uniFED1 <anchor 1307 1563> mark @POS_2_0_MARK_0;
	pos base uniFED2 <anchor 1534 1458> mark @POS_2_0_MARK_0;
	pos base uniFED3 <anchor 375 1615> mark @POS_2_0_MARK_0;
	pos base uniFED4 <anchor 517 1493> mark @POS_2_0_MARK_0;
	pos base uniFED5 <anchor 919 1331> mark @POS_2_0_MARK_0;
	pos base uniFED6 <anchor 931 1234> mark @POS_2_0_MARK_0;
	pos base uniFED7 <anchor 361 1602> mark @POS_2_0_MARK_0;
	pos base uniFED8 <anchor 495 1451> mark @POS_2_0_MARK_0;
	pos base uniFED9 <anchor 959 1379> mark @POS_2_0_MARK_0;
	pos base uniFEDA <anchor 959 1412> mark @POS_2_0_MARK_0;
	pos base uniFEDB <anchor 203 1443> mark @POS_2_0_MARK_0;
	pos base uniFEDC <anchor 203 1443> mark @POS_2_0_MARK_0;
	pos base uniFEDD <anchor 586 1034> mark @POS_2_0_MARK_0;
	pos base uniFEDE <anchor 596 1034> mark @POS_2_0_MARK_0;
	pos base uniFEDF <anchor 283 1638> mark @POS_2_0_MARK_0;
	pos base uniFEE0 <anchor 304 1629> mark @POS_2_0_MARK_0;
	pos base uniFEE1 <anchor 584 1006> mark @POS_2_0_MARK_0;
	pos base uniFEE2 <anchor 651 1032> mark @POS_2_0_MARK_0;
	pos base uniFEE3 <anchor 581 1037> mark @POS_2_0_MARK_0;
	pos base uniFEE4 <anchor 581 986> mark @POS_2_0_MARK_0;
	pos base uniFEE5 <anchor 637 989> mark @POS_2_0_MARK_0;
	pos base uniFEE6 <anchor 633 885> mark @POS_2_0_MARK_0;
	pos base uniFEE7 <anchor 276 1327> mark @POS_2_0_MARK_0;
	pos base uniFEE8 <anchor 382 1278> mark @POS_2_0_MARK_0;
	pos base uniFEE9 <anchor 404 1385> mark @POS_2_0_MARK_0;
	pos base uniFEEA <anchor 610 1274> mark @POS_2_0_MARK_0;
	pos base uniFEEB <anchor 529 1311> mark @POS_2_0_MARK_0;
	pos base uniFEEC <anchor 483 1154> mark @POS_2_0_MARK_0;
	pos base uniFEED <anchor 496 1352> mark @POS_2_0_MARK_0;
	pos base uniFEEE <anchor 410 1026> mark @POS_2_0_MARK_0;
	pos base uniFEEF <anchor 670 1041> mark @POS_2_0_MARK_0;
	pos base uniFEF0 <anchor 723 587> mark @POS_2_0_MARK_0;
	pos base uniFEF1 <anchor 642 880> mark @POS_2_0_MARK_0;
	pos base uniFEF2 <anchor 747 601> mark @POS_2_0_MARK_0;
	pos base uniFEF3 <anchor 327 1047> mark @POS_2_0_MARK_0;
	pos base uniFEF4 <anchor 351 933> mark @POS_2_0_MARK_0;
	pos base uni066E.fina <anchor 1038 1819> mark @POS_2_0_MARK_0;
	pos base uni06A1.fina <anchor 768 2002> mark @POS_2_0_MARK_0;
	pos base uni06A1.init <anchor 495 2065> mark @POS_2_0_MARK_0;
	pos base uni06A1.medi <anchor 463 1502> mark @POS_2_0_MARK_0;
	pos base uni066F.fina <anchor 503 764> mark @POS_2_0_MARK_0;
	pos base uni06D5.fina <anchor 566 1380> mark @POS_2_0_MARK_0;
	pos base uni06CA.fina <anchor 390 1272> mark @POS_2_0_MARK_0;
	pos base NameMe.65541 <anchor 278 1291> mark @POS_2_0_MARK_0;
	pos base NameMe.65542 <anchor 403 1177> mark @POS_2_0_MARK_0;
	pos base uniFBFD.compact <anchor 719 587> mark @POS_2_0_MARK_0;
	pos base uniFE8A.compact <anchor 621 1028> mark @POS_2_0_MARK_0;
	pos base uniFEF2.compact <anchor 741 605> mark @POS_2_0_MARK_0;
} POS_2;
lookup POS_3 {
	lookupflag RightToLeft;
} POS_3;
lookup POS_4 {
	lookupflag RightToLeft;
	markClass uni064D <anchor 545 32> @POS_4_0_MARK_0;
	markClass uni0650 <anchor 571 -44> @POS_4_0_MARK_0;
	markClass uni0655 <anchor 615 44> @POS_4_0_MARK_0;
	pos base uni0621 <anchor 418 -48> mark @POS_4_0_MARK_0;
	pos base uni0622 <anchor 281 -186> mark @POS_4_0_MARK_0;
	pos base uni0623 <anchor 220 -224> mark @POS_4_0_MARK_0;
	pos base uni0624 <anchor 351 -713> mark @POS_4_0_MARK_0;
	pos base uni0625 <anchor 235 -682> mark @POS_4_0_MARK_0;
	pos base uni0626 <anchor 700 -784> mark @POS_4_0_MARK_0;
	pos base uni0627 <anchor 231 -230> mark @POS_4_0_MARK_0;
	pos base uni0628 <anchor 897 -695> mark @POS_4_0_MARK_0;
	pos base uni0629 <anchor 384 -231> mark @POS_4_0_MARK_0;
	pos base uni062A <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uni062B <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uni062C <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uni062D <anchor 639 -826> mark @POS_4_0_MARK_0;
	pos base uni062E <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uni062F <anchor 484 -216> mark @POS_4_0_MARK_0;
	pos base uni0630 <anchor 474 -216> mark @POS_4_0_MARK_0;
	pos base uni0631 <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uni0632 <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uni0633 <anchor 646 -790> mark @POS_4_0_MARK_0;
	pos base uni0634 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uni0635 <anchor 646 -790> mark @POS_4_0_MARK_0;
	pos base uni0636 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uni0637 <anchor 745 -221> mark @POS_4_0_MARK_0;
	pos base uni0638 <anchor 735 -221> mark @POS_4_0_MARK_0;
	pos base uni0639 <anchor 654 -826> mark @POS_4_0_MARK_0;
	pos base uni063A <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uni0640 <anchor 148 -195> mark @POS_4_0_MARK_0;
	pos base uni0641 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uni0642 <anchor 636 -660> mark @POS_4_0_MARK_0;
	pos base uni0643 <anchor 886 -267> mark @POS_4_0_MARK_0;
	pos base uni0644 <anchor 646 -790> mark @POS_4_0_MARK_0;
	pos base uni0645 <anchor 215 -858> mark @POS_4_0_MARK_0;
	pos base uni0646 <anchor 636 -690> mark @POS_4_0_MARK_0;
	pos base uni0647 <anchor 381 -234> mark @POS_4_0_MARK_0;
	pos base uni0648 <anchor 351 -713> mark @POS_4_0_MARK_0;
	pos base uni0649 <anchor 710 -784> mark @POS_4_0_MARK_0;
	pos base uni064A <anchor 734 -1127> mark @POS_4_0_MARK_0;
	pos base uni066E <anchor 542 -219> mark @POS_4_0_MARK_0;
	pos base uni066F <anchor 602 -689> mark @POS_4_0_MARK_0;
	pos base uni067E <anchor 930 -832> mark @POS_4_0_MARK_0;
	pos base uni0686 <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uni0698 <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uni06A1 <anchor 555 -280> mark @POS_4_0_MARK_0;
	pos base uni06A9 <anchor 886 -267> mark @POS_4_0_MARK_0;
	pos base uni06AF <anchor 886 -267> mark @POS_4_0_MARK_0;
	pos base uni06BE <anchor 532 -225> mark @POS_4_0_MARK_0;
	pos base uni06C0 <anchor 398 -256> mark @POS_4_0_MARK_0;
	pos base uni06CA <anchor 352 -710> mark @POS_4_0_MARK_0;
	pos base uni06CC <anchor 700 -784> mark @POS_4_0_MARK_0;
	pos base uni06D5 <anchor 428 -312> mark @POS_4_0_MARK_0;
	pos base uniFB56 <anchor 933 -820> mark @POS_4_0_MARK_0;
	pos base uniFB57 <anchor 906 -842> mark @POS_4_0_MARK_0;
	pos base uniFB58 <anchor 245 -812> mark @POS_4_0_MARK_0;
	pos base uniFB59 <anchor 245 -803> mark @POS_4_0_MARK_0;
	pos base uniFB7A <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFB7B <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFB7C <anchor 694 -790> mark @POS_4_0_MARK_0;
	pos base uniFB7D <anchor 694 -790> mark @POS_4_0_MARK_0;
	pos base uniFB8A <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uniFB8B <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uniFB8E <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFB8F <anchor 886 -267> mark @POS_4_0_MARK_0;
	pos base uniFB90 <anchor 314 -250> mark @POS_4_0_MARK_0;
	pos base uniFB91 <anchor 314 -250> mark @POS_4_0_MARK_0;
	pos base uniFB92 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFB93 <anchor 886 -267> mark @POS_4_0_MARK_0;
	pos base uniFB94 <anchor 314 -250> mark @POS_4_0_MARK_0;
	pos base uniFB95 <anchor 314 -250> mark @POS_4_0_MARK_0;
	pos base uniFB9E <anchor 599 -751> mark @POS_4_0_MARK_0;
	pos base uniFB9F <anchor 437 -1027> mark @POS_4_0_MARK_0;
	pos base uniFBA5.fina <anchor 563 -227> mark @POS_4_0_MARK_0;
	pos base uniFBAC <anchor 510 -239> mark @POS_4_0_MARK_0;
	pos base uniFBAD <anchor 587 -709> mark @POS_4_0_MARK_0;
	pos base uniFBE8 <anchor 356 -264> mark @POS_4_0_MARK_0;
	pos base uniFBE9 <anchor 377 -223> mark @POS_4_0_MARK_0;
	pos base uniFBFC <anchor 700 -784> mark @POS_4_0_MARK_0;
	pos base uniFBFD <anchor 737 -802> mark @POS_4_0_MARK_0;
	pos base uniFBFE <anchor 252 -662> mark @POS_4_0_MARK_0;
	pos base uniFBFF <anchor 252 -662> mark @POS_4_0_MARK_0;
	pos base uniFE70 <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE71 <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE72 <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE73 <anchor 377 -188> mark @POS_4_0_MARK_0;
	pos base uniFE74 <anchor 385 -647> mark @POS_4_0_MARK_0;
	pos base uniFE76 <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE77 <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE78 <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE79 <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE7A <anchor 414 -325> mark @POS_4_0_MARK_0;
	pos base uniFE7B <anchor 385 -391> mark @POS_4_0_MARK_0;
	pos base uniFE7C <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE7D <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE7E <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE7F <anchor 385 -134> mark @POS_4_0_MARK_0;
	pos base uniFE80 <anchor 410 -179> mark @POS_4_0_MARK_0;
	pos base uniFE81 <anchor 297 -171> mark @POS_4_0_MARK_0;
	pos base uniFE82 <anchor 364 -246> mark @POS_4_0_MARK_0;
	pos base uniFE83 <anchor 220 -224> mark @POS_4_0_MARK_0;
	pos base uniFE84 <anchor 341 -248> mark @POS_4_0_MARK_0;
	pos base uniFE85 <anchor 351 -713> mark @POS_4_0_MARK_0;
	pos base uniFE86 <anchor 351 -713> mark @POS_4_0_MARK_0;
	pos base uniFE87 <anchor 256 -671> mark @POS_4_0_MARK_0;
	pos base uniFE88 <anchor 305 -682> mark @POS_4_0_MARK_0;
	pos base uniFE89 <anchor 709 -805> mark @POS_4_0_MARK_0;
	pos base uniFE8A <anchor 737 -802> mark @POS_4_0_MARK_0;
	pos base uniFE8B <anchor 313 -247> mark @POS_4_0_MARK_0;
	pos base uniFE8C <anchor 314 -234> mark @POS_4_0_MARK_0;
	pos base uniFE8D <anchor 252 -238> mark @POS_4_0_MARK_0;
	pos base uniFE8E <anchor 275 -234> mark @POS_4_0_MARK_0;
	pos base uniFE8F <anchor 893 -876> mark @POS_4_0_MARK_0;
	pos base uniFE90 <anchor 897 -695> mark @POS_4_0_MARK_0;
	pos base uniFE91 <anchor 236 -640> mark @POS_4_0_MARK_0;
	pos base uniFE92 <anchor 236 -640> mark @POS_4_0_MARK_0;
	pos base uniFE93 <anchor 403 -233> mark @POS_4_0_MARK_0;
	pos base uniFE94 <anchor 564 -207> mark @POS_4_0_MARK_0;
	pos base uniFE95 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFE96 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFE97 <anchor 271 -223> mark @POS_4_0_MARK_0;
	pos base uniFE98 <anchor 286 -231> mark @POS_4_0_MARK_0;
	pos base uniFE99 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFE9A <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFE9B <anchor 273 -223> mark @POS_4_0_MARK_0;
	pos base uniFE9C <anchor 314 -227> mark @POS_4_0_MARK_0;
	pos base uniFE9D <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFE9E <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFE9F <anchor 679 -629> mark @POS_4_0_MARK_0;
	pos base uniFEA0 <anchor 679 -629> mark @POS_4_0_MARK_0;
	pos base uniFEA1 <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFEA2 <anchor 639 -826> mark @POS_4_0_MARK_0;
	pos base uniFEA3 <anchor 552 -210> mark @POS_4_0_MARK_0;
	pos base uniFEA4 <anchor 552 -210> mark @POS_4_0_MARK_0;
	pos base uniFEA5 <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFEA6 <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFEA7 <anchor 552 -210> mark @POS_4_0_MARK_0;
	pos base uniFEA8 <anchor 552 -210> mark @POS_4_0_MARK_0;
	pos base uniFEA9 <anchor 489 -236> mark @POS_4_0_MARK_0;
	pos base uniFEAA <anchor 470 -216> mark @POS_4_0_MARK_0;
	pos base uniFEAB <anchor 411 -332> mark @POS_4_0_MARK_0;
	pos base uniFEAC <anchor 474 -216> mark @POS_4_0_MARK_0;
	pos base uniFEAD <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uniFEAE <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uniFEAF <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uniFEB0 <anchor 341 -713> mark @POS_4_0_MARK_0;
	pos base uniFEB1 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFEB2 <anchor 646 -790> mark @POS_4_0_MARK_0;
	pos base uniFEB3 <anchor 802 -248> mark @POS_4_0_MARK_0;
	pos base uniFEB4 <anchor 812 -219> mark @POS_4_0_MARK_0;
	pos base uniFEB5 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFEB6 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFEB7 <anchor 836 -217> mark @POS_4_0_MARK_0;
	pos base uniFEB8 <anchor 840 -237> mark @POS_4_0_MARK_0;
	pos base uniFEB9 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFEBA <anchor 646 -790> mark @POS_4_0_MARK_0;
	pos base uniFEBB <anchor 786 -230> mark @POS_4_0_MARK_0;
	pos base uniFEBC <anchor 783 -245> mark @POS_4_0_MARK_0;
	pos base uniFEBD <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFEBE <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFEBF <anchor 828 -289> mark @POS_4_0_MARK_0;
	pos base uniFEC0 <anchor 828 -291> mark @POS_4_0_MARK_0;
	pos base uniFEC1 <anchor 735 -221> mark @POS_4_0_MARK_0;
	pos base uniFEC2 <anchor 745 -221> mark @POS_4_0_MARK_0;
	pos base uniFEC3 <anchor 480 -229> mark @POS_4_0_MARK_0;
	pos base uniFEC4 <anchor 480 -229> mark @POS_4_0_MARK_0;
	pos base uniFEC5 <anchor 735 -221> mark @POS_4_0_MARK_0;
	pos base uniFEC6 <anchor 735 -221> mark @POS_4_0_MARK_0;
	pos base uniFEC7 <anchor 480 -229> mark @POS_4_0_MARK_0;
	pos base uniFEC8 <anchor 480 -229> mark @POS_4_0_MARK_0;
	pos base uniFEC9 <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFECA <anchor 654 -826> mark @POS_4_0_MARK_0;
	pos base uniFECB <anchor 496 -245> mark @POS_4_0_MARK_0;
	pos base uniFECC <anchor 563 -237> mark @POS_4_0_MARK_0;
	pos base uniFECD <anchor 428 -826> mark @POS_4_0_MARK_0;
	pos base uniFECE <anchor 644 -826> mark @POS_4_0_MARK_0;
	pos base uniFECF <anchor 516 -245> mark @POS_4_0_MARK_0;
	pos base uniFED0 <anchor 563 -237> mark @POS_4_0_MARK_0;
	pos base uniFED1 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFED2 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFED3 <anchor 345 -224> mark @POS_4_0_MARK_0;
	pos base uniFED4 <anchor 476 -226> mark @POS_4_0_MARK_0;
	pos base uniFED5 <anchor 605 -643> mark @POS_4_0_MARK_0;
	pos base uniFED6 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFED7 <anchor 345 -224> mark @POS_4_0_MARK_0;
	pos base uniFED8 <anchor 476 -226> mark @POS_4_0_MARK_0;
	pos base uniFED9 <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFEDA <anchor 876 -267> mark @POS_4_0_MARK_0;
	pos base uniFEDB <anchor 344 -250> mark @POS_4_0_MARK_0;
	pos base uniFEDC <anchor 344 -250> mark @POS_4_0_MARK_0;
	pos base uniFEDD <anchor 646 -788> mark @POS_4_0_MARK_0;
	pos base uniFEDE <anchor 646 -790> mark @POS_4_0_MARK_0;
	pos base uniFEDF <anchor 190 -216> mark @POS_4_0_MARK_0;
	pos base uniFEE0 <anchor 251 -201> mark @POS_4_0_MARK_0;
	pos base uniFEE1 <anchor 205 -928> mark @POS_4_0_MARK_0;
	pos base uniFEE2 <anchor 211 -867> mark @POS_4_0_MARK_0;
	pos base uniFEE3 <anchor 517 -257> mark @POS_4_0_MARK_0;
	pos base uniFEE4 <anchor 492 -296> mark @POS_4_0_MARK_0;
	pos base uniFEE5 <anchor 666 -676> mark @POS_4_0_MARK_0;
	pos base uniFEE6 <anchor 636 -790> mark @POS_4_0_MARK_0;
	pos base uniFEE7 <anchor 262 -295> mark @POS_4_0_MARK_0;
	pos base uniFEE8 <anchor 262 -295> mark @POS_4_0_MARK_0;
	pos base uniFEE9 <anchor 389 -256> mark @POS_4_0_MARK_0;
	pos base uniFEEA <anchor 443 -215> mark @POS_4_0_MARK_0;
	pos base uniFEEB <anchor 526 -213> mark @POS_4_0_MARK_0;
	pos base uniFEEC <anchor 585 -775> mark @POS_4_0_MARK_0;
	pos base uniFEED <anchor 576 -844> mark @POS_4_0_MARK_0;
	pos base uniFEEE <anchor 351 -713> mark @POS_4_0_MARK_0;
	pos base uniFEEF <anchor 506 -813> mark @POS_4_0_MARK_0;
	pos base uniFEF0 <anchor 737 -802> mark @POS_4_0_MARK_0;
	pos base uniFEF1 <anchor 750 -1140> mark @POS_4_0_MARK_0;
	pos base uniFEF2 <anchor 719 -1146> mark @POS_4_0_MARK_0;
	pos base uniFEF3 <anchor 252 -662> mark @POS_4_0_MARK_0;
	pos base uniFEF4 <anchor 252 -662> mark @POS_4_0_MARK_0;
	pos base uni066E.fina <anchor 968 -364> mark @POS_4_0_MARK_0;
	pos base uni06A1.fina <anchor 959 -471> mark @POS_4_0_MARK_0;
	pos base uni06A1.init <anchor 398 -381> mark @POS_4_0_MARK_0;
	pos base uni06A1.medi <anchor 436 -213> mark @POS_4_0_MARK_0;
	pos base uni066F.fina <anchor 423 -900> mark @POS_4_0_MARK_0;
	pos base uni06D5.fina <anchor 680 -292> mark @POS_4_0_MARK_0;
	pos base uni06CA.fina <anchor 328 -732> mark @POS_4_0_MARK_0;
	pos base NameMe.65541 <anchor 356 -264> mark @POS_4_0_MARK_0;
	pos base NameMe.65542 <anchor 327 -223> mark @POS_4_0_MARK_0;
	pos base uniFBFD.compact <anchor 733 -802> mark @POS_4_0_MARK_0;
	pos base uniFE8A.compact <anchor 737 -802> mark @POS_4_0_MARK_0;
	pos base uniFEF2.compact <anchor 727 -1086> mark @POS_4_0_MARK_0;
} POS_4;
script arab;
language dflt;
lookup POS_1;
lookup POS_2;
lookup POS_3;
lookup POS_4;
language FAR;
lookup POS_1;
lookup POS_2;
lookup POS_3;
lookup POS_4;
language KUR;
lookup POS_1;
lookup POS_2;
lookup POS_3;
lookup POS_4;
language URD;
lookup POS_1;
lookup POS_2;
lookup POS_3;
lookup POS_4;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_5 {
	lookupflag RightToLeft;
	markClass uni064D <anchor 545 32> @POS_5_0_MARK_0;
	markClass uni0650 <anchor 571 -44> @POS_5_0_MARK_0;
	markClass uni0655 <anchor 615 44> @POS_5_0_MARK_0;
	pos mark uni064D <anchor 595 -407> mark @POS_5_0_MARK_0;
	pos mark uni0650 <anchor 619 -324> mark @POS_5_0_MARK_0;
	pos mark uni0655 <anchor 645 -455> mark @POS_5_0_MARK_0;
} POS_5;
lookup POS_6 {
	lookupflag RightToLeft;
	markClass uni0615 <anchor 767 2009> @POS_6_0_MARK_0;
	markClass uni064B <anchor 583 1123> @POS_6_0_MARK_0;
	markClass uni064C <anchor 680 1278> @POS_6_0_MARK_0;
	markClass uni064E <anchor 545 1397> @POS_6_0_MARK_0;
	markClass uni064F <anchor 591 1359> @POS_6_0_MARK_0;
	markClass uni0651 <anchor 595 1445> @POS_6_0_MARK_0;
	markClass uni0652 <anchor 609 1271> @POS_6_0_MARK_0;
	markClass uni0653 <anchor 485 1566> @POS_6_0_MARK_0;
	markClass uni0654 <anchor 672 1684> @POS_6_0_MARK_0;
	markClass uni0657 <anchor 513 1400> @POS_6_0_MARK_0;
	markClass uni065A <anchor 573 1350> @POS_6_0_MARK_0;
	markClass uni0670 <anchor 768 1776> @POS_6_0_MARK_0;
	markClass uni0651064B <anchor 612 928> @POS_6_0_MARK_0;
	markClass uni0651064C <anchor 627 900> @POS_6_0_MARK_0;
	markClass uni064B0651 <anchor 549 936> @POS_6_0_MARK_0;
	markClass uni0651064E <anchor 618 1138> @POS_6_0_MARK_0;
	markClass uni0651064F <anchor 620 933> @POS_6_0_MARK_0;
	markClass uni064E0651 <anchor 618 1055> @POS_6_0_MARK_0;
	markClass uni0654064E <anchor 637 1186> @POS_6_0_MARK_0;
	markClass uni0654064F <anchor 456 956> @POS_6_0_MARK_0;
	pos mark uni0615 <anchor 591 2889> mark @POS_6_0_MARK_0;
	pos mark uni064B <anchor 553 1596> mark @POS_6_0_MARK_0;
	pos mark uni064C <anchor 637 1852> mark @POS_6_0_MARK_0;
	pos mark uni064E <anchor 541 1651> mark @POS_6_0_MARK_0;
	pos mark uni064F <anchor 542 1865> mark @POS_6_0_MARK_0;
	pos mark uni0651 <anchor 574 1868> mark @POS_6_0_MARK_0;
	pos mark uni0652 <anchor 589 1682> mark @POS_6_0_MARK_0;
	pos mark uni0653 <anchor 455 2024> mark @POS_6_0_MARK_0;
	pos mark uni0654 <anchor 649 2288> mark @POS_6_0_MARK_0;
	pos mark uni0657 <anchor 537 2069> mark @POS_6_0_MARK_0;
	pos mark uni065A <anchor 571 1862> mark @POS_6_0_MARK_0;
	pos mark uni0670 <anchor 756 2355> mark @POS_6_0_MARK_0;
	pos mark uni0651064B <anchor 557 1787> mark @POS_6_0_MARK_0;
	pos mark uni0651064C <anchor 629 1917> mark @POS_6_0_MARK_0;
	pos mark uni064B0651 <anchor 493 1813> mark @POS_6_0_MARK_0;
	pos mark uni0651064E <anchor 548 1784> mark @POS_6_0_MARK_0;
	pos mark uni0651064F <anchor 585 1859> mark @POS_6_0_MARK_0;
	pos mark uni064E0651 <anchor 564 1744> mark @POS_6_0_MARK_0;
	pos mark uni0654064E <anchor 539 1981> mark @POS_6_0_MARK_0;
	pos mark uni0654064F <anchor 506 2107> mark @POS_6_0_MARK_0;
} POS_6;
script arab;
language dflt;
lookup POS_5;
lookup POS_6;
language FAR;
lookup POS_5;
lookup POS_6;
language KUR;
lookup POS_5;
lookup POS_6;
language URD;
lookup POS_5;
lookup POS_6;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 2350;
},
{
name = typoDescender;
value = -1200;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 2350;
},
{
name = winDescent;
value = 1200;
},
{
name = hheaAscender;
value = 2350;
},
{
name = hheaDescender;
value = -1200;
},
{
name = strikeoutPosition;
value = 530;
},
{
name = strikeoutSize;
value = 102;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
11
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
43 0 2 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
30 8 16 5 2 8
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
40 6 23 3 2 8
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 9
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 4 values pushed */
1984 1088 2 9
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 4 values pushed */
64 64 2 9
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
38 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
32 8 18 5 2 12
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
5 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
3
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
7 12 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
11 10 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
13
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 16
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
16 16
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
13 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
14 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
14
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
14
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
14
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
13
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
18 18 1 0 15 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
18 6
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
137
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
13
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
18 18 1 0 15 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
18 6
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
137
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
18
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
44
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
45
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
12 8
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
13
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
12 8
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
12 8
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
50 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
54 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
10 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
10 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
2 32 3 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
2 38 3 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
46
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
10 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
2 32 3 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
2 38 3 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 56
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 57
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
46
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
52
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
52
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
53
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
75
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
9 4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    100,
    100,
    121,
    198,
    198,
    1536,
    0,
    0,
    2350,
    \"-1200\",
    1536,
    \"-57\",
    0,
    2350,
    \"-1200\",
    209,
    209,
    80,
    80,
    1434,
    0,
    1519,
    1024,
    0,
    \"-522\",
    2350,
    \"-1200\",
    1467,
    \"-33\",
    1519,
    1057,
    \"-33\",
    \"-555\",
    2350,
    \"-1200\"
)";
}
);
id = m01;
metricValues = (
{
pos = 2350;
},
{
pos = 1638;
},
{
pos = 1082;
},
{
},
{
pos = -1200;
},
{
}
);
name = Regular;
},
{
customParameters = (
{
name = typoAscender;
value = 2350;
},
{
name = typoDescender;
value = -1200;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 2350;
},
{
name = winDescent;
value = 1200;
},
{
name = hheaAscender;
value = 2350;
},
{
name = hheaDescender;
value = -1200;
},
{
name = strikeoutPosition;
value = 530;
},
{
name = strikeoutSize;
value = 102;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
11
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
43 0 2 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
30 8 16 5 2 8
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
40 6 23 3 2 8
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 9
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 4 values pushed */
1984 1088 2 9
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 4 values pushed */
64 64 2 9
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
38 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
32 8 18 5 2 12
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
5
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
5 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 11
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
3
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
7 12 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
11 10 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
13
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 16
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
16 16
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
13 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
14 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
14
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
14
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
14
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
13
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
18 18 1 0 15 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
18 6
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
137
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 19
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
13
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
18 18 1 0 15 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
18 6
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
137
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 30
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
18
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
44
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
45
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
12 8
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
13
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
12 8
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
12 8
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
50 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
54 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
10 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
10 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
2 32 3 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
2 38 3 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
46
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
10 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
2 32 3 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
2 38 3 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
3
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 56
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 57
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
4
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
46
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
52
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
52
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
53
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
75
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 58
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 59
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
46 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
62
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
63
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
9 4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    142,
    142,
    168,
    312,
    312,
    1583,
    \"-57\",
    0,
    2350,
    \"-1200\",
    1583,
    \"-57\",
    0,
    2350,
    \"-1200\",
    301,
    301,
    145,
    145,
    1434,
    0,
    1546,
    1024,
    0,
    \"-522\",
    2350,
    \"-1200\",
    1467,
    \"-33\",
    1562,
    1057,
    \"-33\",
    \"-555\",
    2350,
    \"-1200\"
)";
}
);
iconName = Bold;
id = "01037D14-118B-4CC1-B98A-141C2A413BDA";
metricValues = (
{
pos = 2350;
},
{
pos = 1638;
},
{
pos = 1082;
},
{
},
{
pos = -1200;
},
{
}
);
name = Bold;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = Parastoo;
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = Parastoo;
}
);
},
{
key = styleNames;
values = (
{
language = ENG;
value = Regular;
}
);
}
);
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 95;
"@MMK_R_C" = -10;
"@MMK_R_U" = -39;
"@MMK_R_Y" = -70;
"@MMK_R_Z" = 20;
"@MMK_R_a" = 55;
"@MMK_R_hyphen" = -40;
"@MMK_R_quotedbl" = -100;
"@MMK_R_quoteleft" = -120;
"@MMK_R_quoteright" = -109;
"@MMK_R_y" = -30;
"@MMK_R_z" = 60;
};
"@MMK_L_C" = {
"@MMK_R_A" = -20;
"@MMK_R_hyphen" = -39;
"@MMK_R_z" = -10;
};
"@MMK_L_D" = {
"@MMK_R_A" = -33;
"@MMK_R_B" = -20;
"@MMK_R_U" = -10;
"@MMK_R_Y" = -30;
"@MMK_R_Z" = -10;
"@MMK_R_a" = -10;
"@MMK_R_b" = -10;
"@MMK_R_comma" = -49;
"@MMK_R_h" = -23;
"@MMK_R_l" = -23;
"@MMK_R_quoteleft" = -31;
"@MMK_R_quoteright" = -18;
};
"@MMK_L_H" = {
"@MMK_R_a" = -16;
"@MMK_R_c" = -45;
"@MMK_R_d" = -43;
"@MMK_R_f" = -18;
"@MMK_R_guillemotleft" = -20;
"@MMK_R_hyphen" = -33;
"@MMK_R_i" = -14;
"@MMK_R_m" = -16;
"@MMK_R_s" = -18;
"@MMK_R_u" = -39;
"@MMK_R_y" = -35;
"@MMK_R_z" = -12;
};
"@MMK_L_L" = {
"@MMK_R_A" = 35;
"@MMK_R_C" = -40;
"@MMK_R_U" = -23;
"@MMK_R_Y" = -162;
"@MMK_R_a" = 45;
"@MMK_R_hyphen" = -82;
"@MMK_R_quotedbl" = -166;
"@MMK_R_quoteleft" = -158;
"@MMK_R_quoteright" = -164;
"@MMK_R_y" = -50;
};
"@MMK_L_N" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -20;
"@MMK_R_comma" = -29;
"@MMK_R_d" = -20;
"@MMK_R_f" = -10;
"@MMK_R_hyphen" = -23;
"@MMK_R_s" = -15;
"@MMK_R_y" = -15;
"@MMK_R_z" = -20;
};
"@MMK_L_O" = {
"@MMK_R_A" = -27;
"@MMK_R_B" = -18;
"@MMK_R_U" = -10;
"@MMK_R_Y" = -40;
"@MMK_R_c" = -10;
"@MMK_R_comma" = -45;
"@MMK_R_d" = -10;
"@MMK_R_quoteleft" = -31;
"@MMK_R_quoteright" = -20;
};
"@MMK_L_S" = {
"@MMK_R_f" = -8;
"@MMK_R_i" = -12;
"@MMK_R_m" = -12;
"@MMK_R_u" = -12;
"@MMK_R_y" = -10;
};
"@MMK_L_U" = {
"@MMK_R_A" = -50;
"@MMK_R_C" = -12;
"@MMK_R_a" = -50;
"@MMK_R_comma" = -59;
"@MMK_R_d" = -40;
"@MMK_R_f" = -20;
"@MMK_R_hyphen" = -18;
"@MMK_R_s" = -15;
"@MMK_R_y" = -10;
"@MMK_R_z" = -45;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -70;
"@MMK_R_C" = -40;
"@MMK_R_Y" = 120;
"@MMK_R_a" = -100;
"@MMK_R_b" = 63;
"@MMK_R_c" = -144;
"@MMK_R_comma" = -110;
"@MMK_R_d" = -100;
"@MMK_R_f" = -33;
"@MMK_R_guillemotleft" = -106;
"@MMK_R_guillemotright" = -43;
"@MMK_R_h" = 45;
"@MMK_R_hyphen" = -115;
"@MMK_R_i" = -12;
"@MMK_R_l" = 31;
"@MMK_R_m" = -100;
"@MMK_R_quoteleft" = 100;
"@MMK_R_s" = -135;
"@MMK_R_u" = -100;
"@MMK_R_y" = -80;
"@MMK_R_z" = -100;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -10;
"@MMK_R_hyphen" = -39;
"@MMK_R_i" = -10;
"@MMK_R_m" = -12;
"@MMK_R_y" = -50;
};
"@MMK_L_a" = {
"@MMK_R_B" = -10;
"@MMK_R_C" = -23;
"@MMK_R_U" = -55;
"@MMK_R_Y" = -125;
"@MMK_R_quotedbl" = -23;
"@MMK_R_quoteleft" = -55;
"@MMK_R_quoteright" = -43;
"@MMK_R_u" = -12;
"@MMK_R_y" = -20;
};
"@MMK_L_b" = {
"@MMK_R_A" = -15;
"@MMK_R_B" = -49;
"@MMK_R_S" = -12;
"@MMK_R_U" = -41;
"@MMK_R_Y" = -115;
"@MMK_R_Z" = -43;
"@MMK_R_f" = -10;
"@MMK_R_quotedbl" = -29;
"@MMK_R_quoteleft" = -70;
"@MMK_R_quoteright" = -53;
"@MMK_R_y" = -16;
};
"@MMK_L_c" = {
"@MMK_R_B" = -39;
"@MMK_R_C" = -12;
"@MMK_R_U" = -37;
"@MMK_R_Y" = -100;
"@MMK_R_a" = -5;
"@MMK_R_c" = -10;
"@MMK_R_d" = -10;
"@MMK_R_quoteleft" = -41;
"@MMK_R_quoteright" = -27;
"@MMK_R_y" = -10;
"@MMK_R_z" = -10;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -45;
"@MMK_R_U" = -55;
"@MMK_R_Y" = -125;
"@MMK_R_quotedbl" = -213;
"@MMK_R_quoteleft" = -227;
"@MMK_R_quoteright" = -178;
"@MMK_R_u" = -23;
"@MMK_R_y" = -94;
};
"@MMK_L_e" = {
"@MMK_R_B" = -33;
"@MMK_R_S" = -10;
"@MMK_R_U" = -41;
"@MMK_R_Y" = -100;
"@MMK_R_Z" = -16;
"@MMK_R_a" = -5;
"@MMK_R_c" = -10;
"@MMK_R_d" = -10;
"@MMK_R_quotedbl" = -20;
"@MMK_R_quoteleft" = -55;
"@MMK_R_quoteright" = -41;
"@MMK_R_y" = -10;
};
"@MMK_L_guillemotleft" = {
"@MMK_R_Y" = -35;
};
"@MMK_L_guillemotright" = {
"@MMK_R_B" = -20;
"@MMK_R_Y" = -106;
"@MMK_R_Z" = -41;
"@MMK_R_quotedbl" = -96;
"@MMK_R_quoteright" = -131;
};
"@MMK_L_h" = {
"@MMK_R_B" = -12;
"@MMK_R_C" = -25;
"@MMK_R_U" = -57;
"@MMK_R_Y" = -100;
"@MMK_R_quotedbl" = -27;
"@MMK_R_quoteleft" = -59;
"@MMK_R_quoteright" = -47;
"@MMK_R_y" = -15;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -40;
"@MMK_R_B" = -33;
"@MMK_R_S" = -29;
"@MMK_R_U" = -16;
"@MMK_R_Y" = -111;
"@MMK_R_Z" = -68;
"@MMK_R_f" = -18;
"@MMK_R_y" = -16;
};
"@MMK_L_i" = {
"@MMK_R_B" = -14;
"@MMK_R_C" = -23;
"@MMK_R_U" = -25;
"@MMK_R_Y" = -12;
"@MMK_R_y" = -10;
};
"@MMK_L_l" = {
"@MMK_R_B" = -16;
"@MMK_R_C" = -23;
"@MMK_R_U" = -27;
"@MMK_R_Y" = -12;
"@MMK_R_b" = 64;
"@MMK_R_y" = -10;
};
"@MMK_L_quotedbl" = {
"@MMK_R_A" = -100;
"@MMK_R_a" = -18;
"@MMK_R_c" = -31;
"@MMK_R_comma" = -213;
"@MMK_R_d" = -53;
"@MMK_R_guillemotleft" = -96;
};
"@MMK_L_quoteleft" = {
"@MMK_R_A" = -120;
"@MMK_R_C" = -31;
"@MMK_R_Y" = 70;
"@MMK_R_a" = -50;
"@MMK_R_c" = -68;
"@MMK_R_comma" = -227;
"@MMK_R_d" = -84;
"@MMK_R_m" = -45;
"@MMK_R_s" = -43;
"@MMK_R_u" = -41;
"@MMK_R_z" = -25;
};
"@MMK_L_quoteright" = {
"@MMK_R_A" = -109;
"@MMK_R_C" = -33;
"@MMK_R_Y" = 20;
"@MMK_R_a" = -43;
"@MMK_R_c" = -59;
"@MMK_R_comma" = -178;
"@MMK_R_d" = -82;
"@MMK_R_guillemotleft" = -141;
"@MMK_R_m" = -31;
"@MMK_R_s" = -37;
"@MMK_R_u" = -29;
"@MMK_R_z" = -20;
};
"@MMK_L_s" = {
"@MMK_R_B" = -33;
"@MMK_R_C" = -10;
"@MMK_R_U" = -45;
"@MMK_R_Y" = -120;
"@MMK_R_Z" = -8;
"@MMK_R_quoteleft" = -27;
};
"@MMK_L_u" = {
"@MMK_R_B" = -16;
"@MMK_R_C" = -25;
"@MMK_R_U" = -53;
"@MMK_R_Y" = -123;
"@MMK_R_quoteleft" = -35;
"@MMK_R_quoteright" = -23;
"@MMK_R_u" = -8;
"@MMK_R_y" = -12;
};
"@MMK_L_y" = {
"@MMK_R_A" = -80;
"@MMK_R_B" = -37;
"@MMK_R_U" = -16;
"@MMK_R_Y" = -72;
"@MMK_R_c" = -20;
"@MMK_R_comma" = -76;
"@MMK_R_d" = -20;
"@MMK_R_h" = -10;
"@MMK_R_l" = -10;
"@MMK_R_y" = 35;
};
"@MMK_L_z" = {
"@MMK_R_B" = -20;
"@MMK_R_C" = -8;
"@MMK_R_U" = -37;
"@MMK_R_Y" = -117;
"@MMK_R_c" = -15;
"@MMK_R_d" = -15;
"@MMK_R_hyphen" = -27;
"@MMK_R_m" = -10;
"@MMK_R_quoteleft" = -27;
"@MMK_R_z" = -10;
};
A = {
G = -12;
J = 100;
T = -50;
V = -80;
W = -94;
X = 85;
acute = -100;
asterisk = -57;
backslash = -100;
bracketright = -51;
question = -25;
seven = -20;
t = -14;
trademark = -78;
two = 10;
v = -40;
w = -40;
x = 55;
};
B = {
B = -18;
D = -18;
E = -18;
F = -18;
H = -18;
I = -18;
J = -33;
K = -18;
L = -18;
M = -18;
N = -18;
P = -18;
R = -18;
T = -18;
U = -15;
V = -30;
W = -39;
X = -45;
Y = -50;
Z = -12;
backslash = -43;
braceright = -41;
bracketright = -74;
f = -16;
f_i = -16;
f_l = -16;
g = -8;
h = -18;
i = -16;
j = -14;
k = -18;
l = -16;
m = -16;
n = -16;
p = -12;
parenright = -43;
r = -16;
t = -14;
u = -14;
v = -23;
w = -25;
x = -53;
y = -27;
z = -14;
};
C = {
g = -10;
};
D = {
J = -55;
M = -20;
V = -27;
W = -30;
X = -55;
backslash = -41;
braceright = -41;
bracketright = -78;
g = -10;
parenright = -47;
x = -16;
};
G = {
C = -25;
G = -25;
O = -25;
Q = -25;
T = -10;
V = -15;
W = -10;
bracketright = -29;
comma = -16;
ellipsis = -16;
parenright = -25;
quotedblbase = -16;
quotesinglbase = -16;
x = -16;
};
H = {
G = -18;
asterisk = -16;
g = -29;
j = -20;
p = -33;
t = -35;
v = -35;
w = -35;
};
I = {
G = -18;
asterisk = -16;
g = -29;
j = -20;
p = -33;
t = -35;
v = -35;
w = -35;
};
J = {
A = -60;
G = -12;
a = -30;
c = -30;
comma = -43;
d = -30;
e = -30;
ellipsis = -43;
emdash = -20;
endash = -20;
f = -20;
f_i = -20;
f_l = -20;
g = -50;
hyphen = -20;
o = -10;
q = -10;
quotedblbase = -43;
quotesinglbase = -43;
s = -20;
t = -20;
uni00AD = -20;
v = -10;
w = -10;
x = -18;
y = -20;
z = -30;
};
K = {
C = -50;
G = -70;
J = 95;
O = -50;
Q = -70;
T = -40;
asterisk = -35;
c = -30;
d = -30;
e = -30;
emdash = -92;
endash = -92;
guilsinglleft = -29;
hyphen = -92;
o = -30;
q = -30;
t = -45;
two = 10;
u = -20;
uni00AD = -92;
v = -100;
w = -100;
y = -55;
};
L = {
C = -40;
G = -40;
Q = -40;
T = -120;
V = -150;
W = -121;
asterisk = -109;
backslash = -123;
braceright = -29;
bracketright = -74;
four = 14;
ordfeminine = -200;
parenright = -39;
periodcentered = -252;
question = -41;
seven = -49;
trademark = -141;
v = -80;
w = -80;
};
M = {
C = -10;
G = -10;
O = -10;
Q = -10;
Y = -10;
asterisk = -18;
c = -15;
d = -15;
e = -15;
emdash = -33;
endash = -33;
f = -10;
f_i = -10;
f_l = -10;
g = -10;
hyphen = -33;
j = -10;
o = -15;
q = -15;
t = -10;
uni00AD = -33;
v = -20;
w = -20;
y = -30;
};
N = {
C = -10;
c = -20;
e = -20;
g = -10;
q = -20;
t = -10;
v = -15;
w = -15;
x = -10;
};
O = {
J = -45;
M = -10;
T = -45;
V = -25;
W = -30;
X = -50;
backslash = -39;
braceright = -41;
bracketright = -74;
c = -10;
e = -10;
g = -10;
parenright = -70;
q = -10;
x = -15;
};
P = {
A = -70;
B = -10;
D = -10;
E = -10;
F = -10;
H = -10;
I = -10;
J = -86;
K = -10;
L = -10;
M = -16;
N = -10;
P = -10;
R = -10;
X = -10;
a = -15;
asterisk = 45;
braceright = -25;
bracketright = -39;
c = -20;
comma = -160;
d = -20;
e = -20;
ellipsis = -172;
emdash = -27;
endash = -27;
four = -20;
g = -20;
h = -12;
hyphen = -27;
k = -12;
l = -12;
o = -20;
parenright = -20;
q = -20;
quotedblbase = -172;
quotesinglbase = -172;
s = -14;
uni00AD = -27;
v = 60;
w = 60;
x = 35;
y = 30;
z = -20;
};
Q = {
J = -45;
M = -10;
T = -25;
V = -30;
W = -30;
X = -20;
Y = -20;
backslash = -39;
braceright = 14;
bracketright = 27;
c = -10;
e = -10;
g = -10;
j = 219;
parenright = -29;
q = -10;
x = -15;
};
R = {
A = 100;
J = 55;
U = -12;
V = -10;
W = -23;
X = 60;
Y = -23;
backslash = -27;
bracketright = -51;
c = -15;
d = -15;
e = -15;
guilsinglleft = -39;
o = -15;
q = -15;
x = 35;
y = -10;
};
S = {
g = -14;
j = -12;
p = -12;
t = -8;
v = -10;
w = -10;
x = -10;
};
T = {
A = -50;
J = -45;
V = 45;
X = 35;
Y = 45;
a = -50;
asterisk = 25;
at = -25;
c = -100;
comma = -144;
d = -100;
e = -100;
ellipsis = -100;
emdash = -131;
endash = -131;
four = -57;
g = -86;
guilsinglleft = -78;
hyphen = -131;
m = -30;
n = -30;
o = -100;
p = -30;
q = -100;
quotedblbase = -100;
quotedblleft = 100;
quoteleft = 100;
quotesinglbase = -170;
r = -30;
s = -55;
u = -30;
uni00AD = -131;
x = -45;
z = -80;
};
U = {
G = -20;
c = -40;
comma = -80;
e = -40;
g = -57;
q = -30;
semicolon = -16;
t = -10;
v = -10;
w = -10;
x = -10;
};
V = {
A = -90;
C = -30;
G = -30;
O = -30;
Q = -30;
T = 45;
V = 120;
W = 110;
X = 110;
Y = 120;
a = -50;
at = -47;
b = 80;
backslash = 47;
braceright = 43;
bracketright = 86;
c = -80;
comma = -176;
d = -80;
e = -80;
ellipsis = -208;
emdash = -63;
endash = -63;
f = -12;
f_i = -12;
f_l = -12;
four = -51;
g = -80;
guilsinglleft = -63;
guilsinglright = -20;
h = 45;
hyphen = -63;
k = 45;
l = 45;
m = -30;
n = -30;
o = -80;
p = -30;
parenright = 90;
q = -80;
quotedblbase = -208;
quotedblleft = 110;
quoteleft = 110;
quotesinglbase = -180;
r = -30;
s = -60;
semicolon = -80;
seven = 68;
t = -20;
trademark = 61;
u = -30;
uni00AD = -63;
v = -30;
w = -30;
x = -30;
y = -37;
z = -80;
};
W = {
A = -90;
C = -30;
G = -30;
O = -30;
Q = -30;
T = 35;
V = 110;
W = 110;
X = 110;
Y = 110;
a = -80;
ampersand = -20;
at = -51;
b = 76;
backslash = 39;
braceright = 39;
bracketright = 80;
c = -80;
comma = -176;
d = -80;
e = -80;
ellipsis = -133;
emdash = -66;
endash = -66;
f = -10;
f_i = -10;
f_l = -10;
four = -53;
g = -100;
guilsinglleft = -63;
guilsinglright = -25;
h = 45;
hyphen = -66;
k = 45;
l = 41;
m = -55;
n = -55;
o = -80;
p = -55;
parenright = 55;
q = -80;
quotedblbase = -133;
quotedblleft = 90;
quoteleft = 90;
quotesinglbase = -180;
r = -55;
s = -80;
semicolon = -43;
seven = 63;
t = -35;
trademark = 55;
u = -70;
uni00AD = -66;
v = -20;
w = -20;
x = -50;
y = -35;
z = -96;
};
X = {
A = 85;
C = -30;
G = -30;
O = -30;
Q = -30;
V = 25;
W = 35;
X = 75;
Y = 55;
a = 45;
asterisk = -16;
d = -33;
emdash = -82;
endash = -82;
guilsinglleft = -25;
hyphen = -82;
q = -33;
t = -10;
uni00AD = -82;
v = -50;
w = -25;
x = 70;
y = -50;
z = 45;
};
Y = {
C = -30;
G = -30;
Q = -30;
T = 45;
V = 110;
W = 80;
X = 55;
ampersand = -29;
asterisk = -23;
at = -72;
backslash = 20;
braceright = 27;
bracketright = 70;
c = -100;
comma = -96;
e = -100;
four = -80;
g = -120;
m = -100;
p = -100;
q = -100;
quotesinglbase = -110;
r = -100;
registered = -33;
semicolon = -57;
seven = 53;
six = -27;
t = -60;
trademark = 47;
v = -80;
w = -80;
x = -100;
zero = -23;
};
Z = {
j = -16;
t = -10;
v = -15;
w = -15;
};
a = {
G = -15;
J = 40;
T = -84;
V = -100;
W = -100;
backslash = -106;
braceright = -43;
bracketright = -92;
parenright = -47;
q = -15;
question = -35;
t = -15;
trademark = -27;
v = -25;
w = -30;
};
ampersand = {
A = 102;
J = 80;
T = -63;
U = -33;
V = -61;
W = -66;
X = 68;
Y = -66;
h = 20;
k = 20;
l = 18;
quotedbl = -106;
quotedblright = -106;
quoteright = -106;
quotesingle = -106;
v = -31;
w = -35;
x = 43;
y = -37;
};
asterisk = {
A = -57;
B = -18;
D = -18;
E = -18;
F = -18;
H = -18;
I = -18;
J = -39;
K = -18;
L = -18;
M = -20;
N = -18;
P = -18;
R = -18;
T = 23;
d = -16;
q = -16;
v = 55;
w = 45;
y = 33;
};
at = {
V = -31;
W = -39;
Y = -53;
quotedbl = -20;
quotedblright = -43;
quoteright = -43;
quotesingle = -20;
};
b = {
J = -20;
M = -43;
T = -64;
V = -70;
W = -80;
X = -94;
Y = -100;
backslash = -98;
braceright = -53;
bracketright = -104;
parenright = -100;
question = -35;
trademark = -20;
v = -10;
w = -10;
x = -10;
y = -15;
};
backslash = {
B = -49;
C = -115;
D = -49;
E = -49;
F = -49;
G = -109;
H = -49;
I = -49;
K = -49;
L = -49;
M = -43;
N = -49;
O = -115;
P = -49;
Q = -115;
R = -49;
S = -51;
T = -154;
U = -129;
V = -176;
W = -174;
Y = -162;
Z = -43;
a = -61;
b = -59;
c = -94;
d = -86;
e = -94;
eight = -78;
f = -51;
f_i = -51;
f_l = -51;
five = -70;
four = -82;
h = -41;
i = -47;
j = 193;
k = -41;
l = -41;
m = -49;
n = -49;
nine = -80;
o = -94;
one = -61;
q = -86;
quotedbl = -231;
quotedblright = -178;
quoteright = -178;
quotesingle = -213;
r = -49;
s = -53;
seven = -121;
six = -92;
t = -104;
three = -66;
two = -43;
u = -106;
v = -147;
w = -143;
x = -29;
z = -47;
zero = -100;
};
bar = {
j = 76;
};
braceleft = {
C = -41;
G = -41;
O = -41;
Q = -41;
S = -20;
V = 23;
Y = 23;
a = -43;
b = 27;
braceleft = -25;
c = -53;
d = -51;
e = -53;
eight = -25;
four = -39;
j = 211;
m = -39;
n = -39;
nine = -23;
o = -53;
one = -20;
parenleft = -27;
q = -51;
r = -39;
s = -41;
six = -35;
t = -39;
three = -20;
u = -43;
v = -37;
w = -37;
z = -39;
zero = -35;
};
braceright = {
braceright = -23;
bracketright = -33;
parenright = -31;
};
bracketleft = {
A = -59;
C = -74;
G = -74;
O = -74;
Q = -74;
S = -41;
V = 53;
W = 31;
X = 35;
Y = 57;
a = -96;
b = 27;
braceleft = -35;
c = -104;
d = -98;
e = -104;
eight = -45;
f = -43;
f_i = -43;
f_l = -43;
four = -78;
i = -25;
j = 217;
m = -90;
n = -90;
nine = -45;
o = -104;
one = -45;
parenleft = -49;
q = -98;
r = -90;
s = -94;
six = -63;
t = -78;
three = -37;
two = -31;
u = -96;
v = -88;
w = -88;
x = -70;
z = -90;
zero = -61;
};
c = {
G = -12;
M = -31;
T = -43;
V = -80;
W = -70;
X = -33;
backslash = -72;
braceright = -39;
bracketright = -92;
c = -10;
e = -10;
parenright = -51;
q = -10;
t = -10;
v = -10;
w = -10;
x = -15;
};
comma = {
G = -39;
T = -113;
V = -139;
W = -133;
quotedbl = -258;
quotedblleft = -258;
quotedblright = -258;
seven = -66;
six = -20;
t = -25;
v = -80;
w = -100;
zero = -31;
};
d = {
B = -14;
C = -23;
D = -14;
E = -14;
F = -14;
G = -23;
H = -14;
I = -14;
K = -14;
L = -14;
M = -8;
N = -14;
O = -23;
P = -14;
Q = -23;
R = -14;
T = -14;
U = -29;
W = -23;
Y = -14;
t = -10;
v = -10;
w = -10;
y = -12;
};
degree = {
four = -66;
};
e = {
M = -25;
T = -88;
V = -80;
W = -70;
X = -27;
backslash = -88;
braceright = -47;
bracketright = -100;
c = -10;
e = -10;
parenright = -61;
q = -10;
question = -29;
t = -15;
trademark = -20;
v = -10;
w = -8;
x = -10;
};
eight = {
braceright = -29;
bracketright = -47;
nine = -15;
parenright = -33;
periodcentered = -23;
};
emdash = {
J = -59;
M = -31;
T = -131;
V = -61;
W = -63;
X = -86;
one = -53;
seven = -125;
three = -49;
two = -66;
v = 55;
w = -16;
};
endash = {
J = -59;
M = -31;
T = -131;
V = -61;
W = -63;
X = -86;
one = -53;
seven = -125;
three = -49;
two = -66;
v = 55;
w = -16;
};
equal = {
one = -23;
seven = -72;
};
exclamdown = {
U = -25;
V = -41;
W = -49;
Y = -61;
j = 86;
};
f = {
B = 63;
D = 63;
E = 63;
F = 63;
H = 90;
I = 63;
J = 80;
K = 63;
L = 63;
M = 96;
N = 63;
P = 63;
R = 63;
T = 123;
U = 115;
V = 186;
W = 162;
X = 208;
Y = 190;
Z = 53;
asterisk = 25;
b = 224;
backslash = 119;
bar = 31;
braceright = 137;
bracketright = 154;
c = -10;
d = -10;
e = -10;
emdash = -20;
endash = -20;
f = 20;
f_i = 20;
f_l = 20;
g = -10;
guilsinglleft = -23;
h = 120;
hyphen = -20;
i = 64;
j = 112;
k = 130;
l = 135;
o = -10;
parenright = 120;
q = -10;
question = 16;
quotedbl = 74;
quotedblleft = 200;
quoteleft = 200;
quotesingle = 74;
t = 25;
trademark = 130;
uni00AD = -20;
v = 40;
w = 35;
y = 25;
};
f_i = {
G = -20;
M = -10;
T = -14;
W = -18;
t = -8;
w = -10;
};
f_l = {
G = -20;
M = -10;
T = -12;
W = -20;
periodcentered = -135;
v = -8;
w = -10;
};
four = {
bracketright = -37;
degree = -27;
parenright = -25;
quotedbl = -25;
quotesingle = -25;
};
fraction = {
four = -82;
seven = 63;
};
g = {
M = -10;
T = 49;
Y = -8;
asterisk = 86;
b = 60;
c = -10;
d = -10;
f = 80;
f_i = 80;
f_l = 80;
h = 50;
i = 50;
j = 129;
k = 48;
l = 48;
p = 10;
q = -10;
question = 25;
v = 22;
w = 20;
y = 40;
};
guilsinglleft = {
W = -23;
};
guilsinglright = {
J = -20;
T = -80;
V = -59;
W = -61;
X = -37;
};
h = {
G = -23;
Q = -25;
T = -90;
V = -80;
W = -80;
Y = -100;
asterisk = -18;
backslash = -113;
braceright = -45;
bracketright = -96;
j = -10;
parenright = -51;
question = -39;
seven = -85;
t = -18;
trademark = -29;
v = -10;
w = -10;
y = -15;
};
hyphen = {
J = -59;
M = -31;
T = -131;
V = -61;
W = -63;
X = -86;
one = -53;
seven = -125;
three = -49;
two = -66;
v = 55;
w = -16;
};
i = {
G = -20;
M = -10;
T = -14;
W = -18;
t = -8;
w = -10;
};
j = {
B = -20;
C = -10;
D = -20;
E = -20;
F = -20;
G = -10;
H = -20;
I = -20;
K = -20;
L = -20;
M = -18;
N = -20;
O = -10;
P = -20;
Q = -10;
R = -20;
S = -10;
U = -14;
a = 10;
j = 64;
};
k = {
A = 50;
C = -45;
G = -45;
O = -45;
Q = -45;
V = -31;
W = -43;
Y = -86;
bracketright = -47;
c = -15;
d = -15;
e = -15;
emdash = -47;
endash = -47;
hyphen = -47;
o = -15;
q = -15;
quotedblleft = -23;
quoteleft = -23;
uni00AD = -47;
};
l = {
G = -20;
M = -10;
T = -12;
W = -20;
periodcentered = -135;
v = -8;
w = -10;
};
m = {
C = -25;
G = -23;
O = -25;
Q = -25;
T = -100;
V = -80;
W = -80;
Y = -100;
asterisk = -18;
backslash = -113;
braceright = -45;
bracketright = -96;
j = -10;
parenright = -51;
question = -39;
t = -18;
trademark = -29;
v = -10;
w = -10;
y = -15;
};
minus = {
one = -53;
seven = -115;
three = -37;
two = -53;
};
n = {
G = -23;
Q = -25;
T = -100;
V = -80;
W = -80;
asterisk = -18;
backslash = -113;
braceright = -45;
bracketright = -96;
j = -10;
parenright = -51;
question = -39;
t = -18;
trademark = -29;
v = -30;
w = -35;
};
nine = {
braceright = -31;
bracketright = -51;
comma = -33;
ellipsis = -33;
parenright = -37;
quotedblbase = -33;
quotesinglbase = -33;
seven = -50;
};
o = {
M = -43;
T = -100;
V = -70;
W = -100;
X = -94;
backslash = -98;
braceright = -53;
bracketright = -104;
parenright = -100;
question = -35;
trademark = -20;
v = -10;
w = -20;
x = -10;
};
one = {
A = 25;
bracketright = -27;
emdash = -25;
endash = -25;
fraction = 39;
hyphen = -25;
minus = -23;
periodcentered = -35;
uni00AD = -25;
};
ordfeminine = {
A = -30;
};
p = {
A = -15;
M = -25;
T = -100;
V = -70;
W = -100;
X = -94;
Y = -100;
backslash = -98;
braceright = -53;
bracketright = -104;
parenright = -100;
question = -35;
trademark = -20;
v = -10;
w = -10;
x = -10;
y = -10;
};
parenleft = {
A = -20;
C = -70;
G = -47;
O = -70;
Q = -70;
S = -23;
V = 85;
a = -55;
braceleft = -31;
c = -100;
d = -66;
e = -100;
eight = -27;
f = -23;
f_i = -23;
f_l = -23;
four = -51;
j = 170;
m = -43;
n = -43;
nine = -25;
o = -100;
parenleft = -37;
q = -66;
r = -43;
s = -51;
six = -43;
t = -41;
three = -20;
u = -51;
v = -41;
w = -41;
x = -23;
z = -43;
zero = -41;
};
parenright = {
braceright = -27;
bracketright = -49;
parenright = -37;
};
periodcentered = {
L = -41;
eight = -29;
l = -135;
one = -61;
seven = -135;
three = -55;
two = -68;
};
plus = {
one = -39;
seven = -74;
three = -29;
two = -41;
};
q = {
B = -33;
C = -10;
D = -33;
E = -33;
F = -33;
G = -10;
H = -33;
I = -33;
K = -33;
L = -33;
M = -31;
N = -33;
O = -10;
P = -33;
Q = -10;
R = -33;
S = -10;
T = -25;
U = -41;
V = -80;
W = -85;
Y = -80;
Z = -14;
backslash = -70;
braceright = 14;
g = 48;
j = 205;
p = 64;
q = -10;
quotedblleft = -27;
quotedblright = -16;
quoteleft = -27;
quoteright = -16;
s = -15;
v = -10;
};
questiondown = {
C = -45;
G = -43;
O = -45;
Q = -45;
T = -66;
U = -63;
V = -100;
W = -102;
Y = -104;
a = -25;
c = -39;
d = -37;
e = -39;
j = 63;
o = -39;
q = -37;
t = -43;
u = -43;
v = -49;
w = -49;
};
quotedbl = {
ampersand = -31;
at = -43;
comma = -258;
ellipsis = -252;
four = -94;
g = -31;
quotedblbase = -279;
quotesinglbase = -258;
};
quotedblbase = {
G = -39;
T = -113;
V = -139;
W = -133;
quotedbl = -281;
quotedblleft = -252;
quotedblright = -252;
seven = -66;
six = -20;
t = -25;
v = -80;
w = -100;
zero = -31;
};
quotedblleft = {
G = -33;
T = 45;
V = 70;
W = 50;
X = 35;
comma = -258;
ellipsis = -252;
g = -63;
p = -43;
quotedblbase = -252;
quotesinglbase = -252;
};
quotedblright = {
G = -35;
V = 12;
ampersand = -35;
at = -80;
comma = -258;
ellipsis = -252;
g = -59;
p = -29;
quotedblbase = -252;
quotesinglbase = -252;
registered = -25;
};
quoteleft = {
G = -33;
T = 45;
V = 70;
W = 50;
X = 35;
g = -63;
p = -43;
};
quoteright = {
G = -35;
V = 12;
ampersand = -35;
at = -80;
g = -59;
p = -29;
registered = -25;
};
quotesinglbase = {
G = -39;
T = -170;
V = -150;
W = -180;
Y = -125;
quotedbl = -258;
quotedblleft = -252;
quotedblright = -252;
seven = -66;
six = -20;
t = -25;
v = -120;
w = -100;
zero = -31;
};
quotesingle = {
ampersand = -31;
at = -43;
four = -94;
g = -31;
};
r = {
A = -60;
B = -43;
D = -43;
E = -43;
F = -43;
H = -43;
I = -43;
J = -50;
K = -43;
L = -43;
M = -45;
N = -43;
P = -43;
R = -43;
U = -18;
V = -39;
W = -49;
X = -127;
Y = -100;
Z = -8;
a = -15;
ampersand = -25;
backslash = -39;
braceright = -41;
bracketright = -94;
c = -15;
comma = -86;
d = -15;
e = -15;
ellipsis = -86;
emdash = -16;
endash = -16;
g = -10;
guilsinglleft = -27;
h = -8;
hyphen = -16;
k = -8;
l = -8;
o = -15;
parenright = -49;
q = -15;
quotedblbase = -86;
quotedblleft = -23;
quoteleft = -23;
quotesinglbase = -86;
t = 15;
uni00AD = -16;
v = 15;
w = 15;
y = 35;
};
registered = {
W = -20;
Y = -27;
};
s = {
G = -8;
M = -25;
T = -23;
V = -70;
W = -96;
X = -14;
backslash = -68;
braceright = -43;
bracketright = -96;
parenright = -53;
};
seven = {
A = -45;
V = 55;
W = 31;
X = 25;
Y = 53;
bracketright = 10;
cent = -25;
comma = -90;
ellipsis = -90;
emdash = -39;
endash = -39;
four = -29;
fraction = -66;
hyphen = -39;
minus = -43;
periodcentered = -43;
plus = -29;
quotedblbase = -90;
quotedblleft = 70;
quoteleft = 70;
quotesinglbase = -120;
uni00AD = -39;
};
six = {
braceright = -23;
bracketright = -35;
parenright = -25;
seven = -15;
};
t = {
U = -14;
V = -41;
W = -49;
Y = -88;
backslash = -43;
braceright = -23;
bracketright = -72;
parenright = -33;
t = 20;
v = 35;
w = 35;
x = 25;
y = 5;
};
three = {
braceright = -31;
bracketright = -49;
parenright = -37;
seven = -50;
};
trademark = {
A = -47;
J = -18;
};
two = {
bracketright = -39;
emdash = -37;
endash = -37;
four = -45;
hyphen = -37;
minus = -35;
periodcentered = -43;
three = -30;
uni00AD = -37;
};
u = {
G = -23;
M = -8;
Q = -25;
T = -47;
V = -80;
W = -121;
backslash = -86;
braceright = -43;
bracketright = -94;
parenright = -47;
question = -20;
trademark = -23;
v = -10;
w = -12;
};
v = {
A = -78;
B = -35;
D = -35;
E = -35;
F = -35;
H = -35;
I = -35;
J = -90;
K = -35;
L = -35;
M = -39;
N = -35;
P = -35;
R = -35;
U = -16;
V = -20;
W = -33;
X = -80;
Y = -70;
a = -20;
asterisk = 55;
backslash = -23;
braceright = -37;
bracketright = -88;
c = -10;
comma = -80;
d = -29;
e = -10;
ellipsis = -80;
emdash = -16;
endash = -16;
g = -15;
hyphen = -16;
o = -10;
parenright = -41;
q = -29;
quotedblbase = -80;
quotesinglbase = -120;
t = 35;
uni00AD = -16;
v = 45;
w = 55;
x = 30;
};
w = {
A = -94;
B = -33;
D = -33;
E = -33;
F = -33;
H = -33;
I = -33;
J = -98;
K = -33;
L = -33;
M = -37;
N = -33;
P = -33;
R = -33;
U = -14;
V = -16;
W = -31;
X = -80;
Y = -63;
a = -20;
asterisk = 45;
braceright = -37;
bracketright = -88;
c = -20;
comma = -96;
d = -35;
e = -25;
ellipsis = -100;
emdash = -35;
endash = -35;
g = -25;
guilsinglleft = -23;
hyphen = -35;
l = -10;
o = -25;
parenright = -41;
q = -25;
quotedblbase = -100;
quotesinglbase = -100;
uni00AD = -35;
v = 55;
w = 55;
x = 35;
z = -25;
};
x = {
A = 65;
G = -43;
U = -16;
V = -47;
W = -59;
Y = -102;
backslash = -29;
bracketright = -59;
c = -10;
d = -10;
e = -10;
emdash = -20;
endash = -20;
hyphen = -20;
o = -10;
q = -10;
uni00AD = -20;
};
y = {
J = -86;
M = -39;
V = -20;
W = -35;
X = -40;
asterisk = 35;
backslash = -23;
braceright = -37;
bracketright = -82;
c = -20;
comma = -112;
e = -20;
g = -25;
parenright = -39;
q = -20;
t = 10;
};
z = {
G = -8;
M = -14;
T = -50;
V = -80;
W = -90;
backslash = -59;
braceright = -39;
bracketright = -90;
c = -15;
e = -10;
parenright = -45;
q = -15;
};
zero = {
Y = -20;
backslash = -27;
braceright = -35;
bracketright = -61;
comma = -33;
ellipsis = -33;
parenright = -41;
quotedblbase = -33;
quotesinglbase = -33;
seven = -45;
two = -15;
};
};
"01037D14-118B-4CC1-B98A-141C2A413BDA" = {
"@MMK_L_A" = {
"@MMK_R_A" = 49;
"@MMK_R_C" = -41;
"@MMK_R_U" = -80;
"@MMK_R_Y" = -139;
"@MMK_R_b" = -16;
"@MMK_R_c" = -27;
"@MMK_R_d" = -23;
"@MMK_R_f" = -12;
"@MMK_R_guillemotleft" = -41;
"@MMK_R_guillemotright" = 16;
"@MMK_R_hyphen" = -78;
"@MMK_R_i" = -10;
"@MMK_R_m" = -10;
"@MMK_R_quotedbl" = -147;
"@MMK_R_quoteleft" = -135;
"@MMK_R_quoteright" = -141;
"@MMK_R_s" = -12;
"@MMK_R_u" = -43;
"@MMK_R_y" = -109;
"@MMK_R_z" = 25;
};
"@MMK_L_C" = {
"@MMK_R_A" = -14;
"@MMK_R_hyphen" = -55;
};
"@MMK_L_D" = {
"@MMK_R_A" = -57;
"@MMK_R_B" = -29;
"@MMK_R_U" = -16;
"@MMK_R_Y" = -57;
"@MMK_R_Z" = -10;
"@MMK_R_a" = -12;
"@MMK_R_b" = -12;
"@MMK_R_comma" = -55;
"@MMK_R_f" = -8;
"@MMK_R_h" = -29;
"@MMK_R_i" = -8;
"@MMK_R_l" = -29;
"@MMK_R_m" = -8;
"@MMK_R_z" = -8;
};
"@MMK_L_E" = {
"@MMK_R_Y" = -14;
"@MMK_R_c" = -10;
"@MMK_R_d" = -8;
"@MMK_R_f" = -10;
"@MMK_R_hyphen" = -29;
"@MMK_R_i" = -10;
"@MMK_R_m" = -10;
"@MMK_R_s" = -10;
"@MMK_R_u" = -18;
"@MMK_R_y" = -33;
"@MMK_R_z" = -10;
};
"@MMK_L_H" = {
"@MMK_R_C" = -25;
"@MMK_R_a" = -25;
"@MMK_R_c" = -53;
"@MMK_R_d" = -49;
"@MMK_R_f" = -27;
"@MMK_R_guillemotleft" = -33;
"@MMK_R_hyphen" = -47;
"@MMK_R_i" = -25;
"@MMK_R_m" = -23;
"@MMK_R_s" = -25;
"@MMK_R_u" = -51;
"@MMK_R_y" = -66;
"@MMK_R_z" = -18;
};
"@MMK_L_L" = {
"@MMK_R_U" = -27;
"@MMK_R_Y" = -158;
"@MMK_R_quotedbl" = -170;
"@MMK_R_quoteleft" = -176;
"@MMK_R_quoteright" = -170;
"@MMK_R_u" = -18;
"@MMK_R_y" = -90;
};
"@MMK_L_N" = {
"@MMK_R_A" = -33;
"@MMK_R_C" = -20;
"@MMK_R_a" = -55;
"@MMK_R_b" = 23;
"@MMK_R_c" = -53;
"@MMK_R_comma" = -37;
"@MMK_R_d" = -49;
"@MMK_R_f" = -43;
"@MMK_R_guillemotleft" = -25;
"@MMK_R_hyphen" = -37;
"@MMK_R_i" = -43;
"@MMK_R_m" = -47;
"@MMK_R_s" = -49;
"@MMK_R_u" = -47;
"@MMK_R_y" = -47;
"@MMK_R_z" = -51;
};
"@MMK_L_O" = {
"@MMK_R_A" = -49;
"@MMK_R_B" = -25;
"@MMK_R_U" = -12;
"@MMK_R_Y" = -47;
"@MMK_R_a" = -12;
"@MMK_R_b" = -10;
"@MMK_R_comma" = -49;
"@MMK_R_h" = -27;
"@MMK_R_l" = -27;
};
"@MMK_L_S" = {
"@MMK_R_A" = -14;
"@MMK_R_Y" = -16;
"@MMK_R_f" = -16;
"@MMK_R_h" = -10;
"@MMK_R_i" = -18;
"@MMK_R_l" = -10;
"@MMK_R_m" = -18;
"@MMK_R_s" = -10;
"@MMK_R_u" = -16;
"@MMK_R_y" = -23;
"@MMK_R_z" = -14;
};
"@MMK_L_U" = {
"@MMK_R_A" = -86;
"@MMK_R_C" = -12;
"@MMK_R_a" = -68;
"@MMK_R_b" = 43;
"@MMK_R_c" = -57;
"@MMK_R_comma" = -66;
"@MMK_R_d" = -57;
"@MMK_R_f" = -39;
"@MMK_R_guillemotright" = -23;
"@MMK_R_hyphen" = -31;
"@MMK_R_i" = -41;
"@MMK_R_m" = -57;
"@MMK_R_s" = -57;
"@MMK_R_u" = -39;
"@MMK_R_y" = -35;
"@MMK_R_z" = -59;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -133;
"@MMK_R_C" = -61;
"@MMK_R_S" = -14;
"@MMK_R_Y" = 25;
"@MMK_R_a" = -166;
"@MMK_R_b" = 86;
"@MMK_R_c" = -170;
"@MMK_R_comma" = -115;
"@MMK_R_d" = -166;
"@MMK_R_f" = -59;
"@MMK_R_guillemotleft" = -135;
"@MMK_R_guillemotright" = -61;
"@MMK_R_h" = 41;
"@MMK_R_hyphen" = -139;
"@MMK_R_i" = -55;
"@MMK_R_l" = 41;
"@MMK_R_m" = -127;
"@MMK_R_quoteright" = 47;
"@MMK_R_s" = -158;
"@MMK_R_u" = -121;
"@MMK_R_y" = -104;
"@MMK_R_z" = -135;
};
"@MMK_L_Z" = {
"@MMK_R_c" = -12;
"@MMK_R_d" = -10;
"@MMK_R_f" = -16;
"@MMK_R_hyphen" = -39;
"@MMK_R_i" = -16;
"@MMK_R_m" = -16;
"@MMK_R_s" = -12;
"@MMK_R_u" = -35;
"@MMK_R_y" = -63;
"@MMK_R_z" = -12;
};
"@MMK_L_a" = {
"@MMK_R_B" = -10;
"@MMK_R_C" = -20;
"@MMK_R_U" = -63;
"@MMK_R_Y" = -158;
"@MMK_R_quotedbl" = -47;
"@MMK_R_quoteleft" = -39;
"@MMK_R_quoteright" = -45;
"@MMK_R_y" = -27;
};
"@MMK_L_c" = {
"@MMK_R_B" = -41;
"@MMK_R_C" = -14;
"@MMK_R_U" = -51;
"@MMK_R_Y" = -154;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -43;
"@MMK_R_U" = -66;
"@MMK_R_Y" = -143;
"@MMK_R_quotedbl" = -193;
"@MMK_R_quoteleft" = -227;
"@MMK_R_quoteright" = -215;
"@MMK_R_u" = -25;
"@MMK_R_y" = -96;
};
"@MMK_L_e" = {
"@MMK_R_A" = -12;
"@MMK_R_B" = -33;
"@MMK_R_S" = -12;
"@MMK_R_U" = -55;
"@MMK_R_Y" = -190;
"@MMK_R_Z" = -16;
"@MMK_R_quotedbl" = -39;
"@MMK_R_quoteleft" = -29;
"@MMK_R_quoteright" = -33;
"@MMK_R_y" = -8;
};
"@MMK_L_guillemotleft" = {
"@MMK_R_A" = 16;
"@MMK_R_U" = -23;
"@MMK_R_Y" = -47;
};
"@MMK_L_guillemotright" = {
"@MMK_R_A" = -45;
"@MMK_R_B" = -35;
"@MMK_R_Y" = -135;
"@MMK_R_Z" = -43;
"@MMK_R_quotedbl" = -98;
"@MMK_R_quoteright" = -82;
};
"@MMK_L_h" = {
"@MMK_R_B" = -12;
"@MMK_R_C" = -27;
"@MMK_R_S" = -10;
"@MMK_R_U" = -68;
"@MMK_R_Y" = -162;
"@MMK_R_hyphen" = -18;
"@MMK_R_quotedbl" = -49;
"@MMK_R_quoteleft" = -43;
"@MMK_R_quoteright" = -49;
"@MMK_R_u" = -10;
"@MMK_R_y" = -33;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -80;
"@MMK_R_B" = -47;
"@MMK_R_S" = -20;
"@MMK_R_U" = -33;
"@MMK_R_Y" = -135;
"@MMK_R_Z" = -74;
"@MMK_R_f" = -18;
"@MMK_R_h" = -16;
"@MMK_R_l" = -16;
"@MMK_R_y" = -16;
};
"@MMK_L_i" = {
"@MMK_R_B" = -16;
"@MMK_R_C" = -25;
"@MMK_R_S" = -10;
"@MMK_R_U" = -37;
"@MMK_R_Y" = -29;
"@MMK_R_hyphen" = -18;
"@MMK_R_y" = -16;
};
"@MMK_L_l" = {
"@MMK_R_B" = -16;
"@MMK_R_C" = -27;
"@MMK_R_S" = -10;
"@MMK_R_U" = -39;
"@MMK_R_Y" = -33;
"@MMK_R_hyphen" = -18;
"@MMK_R_y" = -16;
};
"@MMK_L_o" = {
"@MMK_R_A" = -31;
"@MMK_R_B" = -51;
"@MMK_R_S" = -16;
"@MMK_R_U" = -59;
"@MMK_R_Y" = -168;
"@MMK_R_Z" = -37;
"@MMK_R_f" = -8;
"@MMK_R_h" = -8;
"@MMK_R_l" = -8;
"@MMK_R_quotedbl" = -51;
"@MMK_R_quoteleft" = -37;
"@MMK_R_quoteright" = -43;
"@MMK_R_y" = -12;
};
"@MMK_L_quotedbl" = {
"@MMK_R_A" = -143;
"@MMK_R_a" = -33;
"@MMK_R_b" = 10;
"@MMK_R_c" = -57;
"@MMK_R_comma" = -193;
"@MMK_R_d" = -80;
"@MMK_R_guillemotleft" = -96;
"@MMK_R_s" = -25;
};
"@MMK_L_quoteleft" = {
"@MMK_R_A" = -127;
"@MMK_R_c" = -35;
"@MMK_R_comma" = -227;
"@MMK_R_d" = -47;
"@MMK_R_y" = 33;
};
"@MMK_L_quoteright" = {
"@MMK_R_A" = -147;
"@MMK_R_C" = -16;
"@MMK_R_Y" = 41;
"@MMK_R_a" = -43;
"@MMK_R_b" = 43;
"@MMK_R_c" = -61;
"@MMK_R_comma" = -215;
"@MMK_R_d" = -76;
"@MMK_R_guillemotleft" = -96;
"@MMK_R_s" = -37;
};
"@MMK_L_s" = {
"@MMK_R_A" = -10;
"@MMK_R_B" = -33;
"@MMK_R_C" = -10;
"@MMK_R_U" = -63;
"@MMK_R_Y" = -127;
"@MMK_R_Z" = -10;
};
"@MMK_L_u" = {
"@MMK_R_B" = -16;
"@MMK_R_C" = -25;
"@MMK_R_S" = -10;
"@MMK_R_U" = -61;
"@MMK_R_Y" = -125;
"@MMK_R_hyphen" = -18;
"@MMK_R_quoteright" = -27;
"@MMK_R_y" = -16;
};
"@MMK_L_y" = {
"@MMK_R_A" = -100;
"@MMK_R_B" = -63;
"@MMK_R_U" = -37;
"@MMK_R_Y" = -66;
"@MMK_R_a" = -8;
"@MMK_R_c" = -18;
"@MMK_R_comma" = -80;
"@MMK_R_d" = -18;
"@MMK_R_guillemotleft" = -20;
"@MMK_R_h" = -16;
"@MMK_R_hyphen" = -20;
"@MMK_R_l" = -16;
};
"@MMK_L_z" = {
"@MMK_R_B" = -23;
"@MMK_R_C" = -10;
"@MMK_R_U" = -57;
"@MMK_R_Y" = -127;
"@MMK_R_hyphen" = -18;
};
A = {
J = 35;
T = -109;
V = -160;
W = -143;
asterisk = -104;
backslash = -145;
braceright = -49;
bracketright = -109;
four = -20;
g = -12;
j = -33;
p = -31;
parenright = -43;
question = -61;
registered = -33;
seven = -59;
six = -23;
t = -45;
trademark = -121;
two = 18;
v = -100;
w = -66;
x = -8;
zero = -31;
};
B = {
A = -31;
B = -23;
D = -23;
E = -23;
F = -23;
H = -23;
I = -23;
K = -23;
L = -23;
M = -25;
N = -23;
P = -23;
R = -23;
T = -14;
U = -12;
V = -45;
W = -45;
X = -63;
Y = -43;
Z = -10;
backslash = -37;
braceright = -55;
bracketright = -94;
f = -23;
four = 25;
g = -12;
h = -20;
i = -25;
j = -20;
k = -20;
l = -20;
m = -23;
n = -23;
p = -20;
parenright = -45;
r = -23;
s = -8;
t = -16;
u = -16;
v = -29;
w = -27;
x = -37;
y = -31;
z = -14;
};
C = {
ampersand = 25;
g = -16;
three = 16;
};
D = {
J = -23;
M = -31;
V = -53;
W = -51;
X = -74;
backslash = -41;
braceright = -57;
bracketright = -102;
g = -12;
parenright = -51;
x = -12;
};
E = {
V = -14;
W = -14;
g = -16;
j = -23;
p = -23;
t = -14;
v = -31;
w = -25;
};
F = {
A = -104;
J = -57;
Y = 12;
a = -84;
asterisk = 57;
at = -25;
b = 55;
backslash = 18;
braceright = 43;
bracketright = 55;
c = -86;
comma = -131;
d = -86;
e = -86;
ellipsis = -131;
emdash = -61;
endash = -61;
f = -10;
four = -29;
g = -82;
guilsinglleft = -43;
h = 10;
hyphen = -61;
i = -23;
j = -16;
k = 10;
l = 10;
m = -31;
n = -31;
o = -86;
one = 59;
p = -25;
q = -86;
quotedblbase = -131;
quotedblright = 23;
quoteright = 23;
quotesinglbase = -131;
r = -31;
s = -70;
seven = 45;
trademark = 18;
u = -18;
uni00AD = -61;
w = -8;
x = -10;
z = -31;
};
G = {
A = -16;
T = -14;
V = -29;
W = -29;
X = -20;
Y = -29;
braceright = -29;
bracketright = -43;
f = -14;
four = 37;
guilsinglleft = 18;
h = -12;
i = -12;
j = -12;
k = -12;
l = -12;
m = -12;
n = -12;
p = -12;
parenright = -31;
quotedbl = -16;
quotesingle = -16;
r = -12;
t = -10;
v = -12;
w = -14;
x = -23;
y = -14;
};
H = {
asterisk = -18;
g = -35;
j = -43;
p = -49;
t = -51;
v = -66;
w = -63;
x = -20;
};
I = {
asterisk = -18;
g = -35;
j = -43;
p = -49;
t = -51;
v = -66;
w = -63;
x = -20;
};
J = {
A = -66;
C = -16;
G = -16;
J = -23;
O = -16;
Q = -16;
a = -61;
at = -20;
b = 39;
braceright = 27;
bracketright = 39;
c = -57;
comma = -55;
d = -57;
e = -57;
ellipsis = -55;
emdash = -35;
endash = -35;
f = -43;
g = -59;
guilsinglleft = -20;
guilsinglright = -23;
hyphen = -35;
i = -43;
j = -33;
m = -55;
n = -55;
o = -57;
p = -53;
q = -57;
quotedblbase = -55;
quotesinglbase = -55;
r = -55;
s = -55;
semicolon = -33;
seven = 10;
t = -43;
u = -43;
uni00AD = -35;
v = -39;
w = -41;
x = -45;
y = -39;
z = -59;
};
K = {
C = -84;
G = -84;
J = 33;
O = -84;
Q = -84;
a = -10;
asterisk = -39;
c = -55;
d = -43;
e = -55;
emdash = -117;
endash = -117;
g = -16;
guilsinglleft = -55;
guilsinglright = 23;
hyphen = -117;
j = -31;
o = -55;
p = -29;
q = -43;
t = -53;
two = 27;
u = -55;
uni00AD = -117;
v = -135;
w = -123;
y = -143;
};
L = {
J = 29;
T = -125;
V = -158;
W = -129;
ampersand = 16;
asterisk = -100;
backslash = -129;
braceright = -43;
bracketright = -94;
four = 49;
j = -18;
p = -16;
parenright = -37;
periodcentered = -231;
question = -41;
seven = -55;
t = -18;
trademark = -96;
v = -88;
w = -68;
};
M = {
C = -25;
G = -25;
O = -25;
Q = -25;
V = -12;
W = -12;
Y = -10;
a = -16;
asterisk = -23;
c = -47;
d = -41;
e = -47;
emdash = -45;
endash = -45;
f = -20;
g = -27;
guilsinglleft = -31;
hyphen = -45;
i = -18;
j = -43;
m = -18;
n = -18;
o = -47;
p = -47;
q = -41;
r = -18;
s = -18;
t = -49;
u = -47;
uni00AD = -45;
v = -70;
w = -66;
x = -16;
y = -70;
z = -14;
};
N = {
J = -12;
at = -20;
braceright = 10;
bracketright = 23;
g = -53;
j = -39;
p = -47;
semicolon = -27;
t = -49;
v = -47;
w = -47;
x = -43;
};
O = {
J = -18;
M = -25;
V = -45;
W = -45;
X = -66;
backslash = -33;
braceright = -53;
bracketright = -94;
g = -12;
parenright = -47;
x = -12;
};
P = {
A = -113;
B = -12;
D = -12;
E = -12;
F = -12;
H = -12;
I = -12;
J = -88;
K = -12;
L = -12;
M = -12;
N = -12;
P = -12;
R = -12;
W = -10;
X = -33;
a = -20;
asterisk = 45;
braceright = -31;
bracketright = -49;
c = -35;
comma = -186;
d = -33;
e = -35;
ellipsis = -186;
emdash = -16;
endash = -16;
g = -33;
guilsinglleft = -20;
h = -12;
hyphen = -16;
k = -12;
l = -12;
o = -35;
one = 43;
parenright = -20;
q = -33;
quotedblbase = -186;
quotedblleft = 41;
quoteleft = 41;
quotesinglbase = -186;
s = -12;
seven = 35;
uni00AD = -16;
};
Q = {
J = -18;
M = -25;
V = -45;
W = -45;
X = -66;
backslash = -33;
bar = 18;
braceright = 133;
bracketright = 141;
comma = -27;
g = 78;
j = 317;
parenright = 96;
quotedblbase = -27;
quotesinglbase = -27;
x = -12;
};
R = {
C = -10;
G = -10;
J = 12;
O = -10;
Q = -10;
U = -20;
V = -41;
W = -41;
X = -20;
Y = -35;
backslash = -29;
braceright = -35;
bracketright = -80;
c = -29;
d = -20;
e = -29;
emdash = -27;
endash = -27;
guilsinglleft = -45;
hyphen = -27;
j = -12;
o = -29;
p = -12;
parenright = -23;
q = -20;
t = -12;
trademark = -76;
u = -12;
uni00AD = -27;
v = -18;
w = -18;
y = -18;
};
S = {
V = -16;
W = -16;
bracketright = -20;
four = 12;
g = -18;
j = -20;
p = -20;
parenright = -23;
t = -14;
v = -23;
w = -23;
x = -23;
};
T = {
A = -109;
J = -57;
a = -66;
ampersand = -20;
asterisk = 51;
at = -31;
b = 51;
backslash = 12;
braceright = 39;
bracketright = 49;
c = -104;
comma = -111;
d = -98;
e = -104;
ellipsis = -111;
emdash = -131;
endash = -131;
four = -63;
g = -88;
guilsinglleft = -94;
hyphen = -131;
i = -8;
m = -8;
n = -8;
o = -104;
one = 53;
q = -98;
quotedblbase = -111;
quotedblleft = 76;
quotedblright = 16;
quoteleft = 76;
quoteright = 16;
quotesinglbase = -111;
r = -8;
s = -53;
seven = 41;
uni00AD = -131;
z = -16;
};
U = {
J = -29;
braceright = 35;
bracketright = 45;
g = -63;
j = -31;
p = -49;
semicolon = -33;
seven = 18;
t = -39;
v = -35;
w = -37;
x = -43;
};
V = {
A = -158;
C = -53;
G = -53;
J = -72;
O = -53;
Q = -53;
S = -18;
T = 14;
Y = 49;
a = -166;
ampersand = -45;
asterisk = -18;
at = -88;
b = 94;
backslash = 57;
braceright = 84;
bracketright = 96;
c = -162;
comma = -229;
d = -156;
e = -162;
eight = -27;
ellipsis = -229;
emdash = -113;
endash = -113;
f = -55;
four = -90;
g = -160;
guilsinglleft = -109;
guilsinglright = -61;
h = 49;
hyphen = -113;
i = -53;
j = -39;
k = 49;
l = 49;
m = -113;
n = -113;
nine = -20;
o = -162;
p = -100;
parenright = 41;
q = -156;
quotedbl = 16;
quotedblbase = -229;
quotedblleft = 76;
quotedblright = 55;
quoteleft = 76;
quoteright = 55;
quotesinglbase = -229;
quotesingle = 16;
r = -113;
registered = -45;
s = -156;
semicolon = -80;
seven = 68;
six = -41;
t = -76;
trademark = 41;
u = -96;
uni00AD = -113;
v = -80;
w = -84;
x = -94;
y = -82;
z = -131;
zero = -39;
};
W = {
A = -143;
C = -49;
G = -49;
J = -63;
M = -10;
O = -49;
Q = -49;
S = -23;
T = 16;
X = 49;
a = -143;
ampersand = -43;
asterisk = -23;
at = -80;
b = 96;
backslash = 57;
braceright = 86;
bracketright = 98;
c = -139;
comma = -160;
d = -135;
e = -139;
eight = -27;
ellipsis = -160;
emdash = -98;
endash = -98;
f = -53;
four = -80;
g = -137;
guilsinglleft = -94;
guilsinglright = -57;
h = 51;
hyphen = -98;
i = -51;
j = -39;
k = 51;
l = 51;
m = -96;
n = -96;
nine = -25;
o = -139;
one = -23;
p = -90;
parenright = 43;
q = -135;
quotedbl = 18;
quotedblbase = -160;
quotedblright = 59;
quoteright = 59;
quotesinglbase = -160;
quotesingle = 18;
r = -96;
registered = -43;
s = -133;
semicolon = -74;
seven = 70;
six = -37;
t = -70;
three = -23;
trademark = 43;
u = -94;
uni00AD = -98;
v = -74;
w = -78;
x = -90;
y = -76;
z = -117;
zero = -37;
};
X = {
A = 49;
C = -74;
G = -74;
J = 35;
O = -74;
Q = -74;
V = -49;
W = -49;
asterisk = -35;
c = -31;
d = -33;
e = -31;
emdash = -111;
endash = -111;
g = -12;
guilsinglleft = -49;
guilsinglright = 14;
hyphen = -111;
j = -29;
o = -31;
p = -31;
q = -33;
t = -49;
two = 25;
u = -51;
uni00AD = -111;
v = -127;
w = -104;
y = -135;
z = 25;
};
Y = {
J = -57;
V = 25;
W = 25;
ampersand = -47;
asterisk = -16;
at = -90;
backslash = 57;
braceright = 76;
bracketright = 86;
eight = -27;
four = -104;
g = -162;
j = -43;
p = -125;
parenright = 33;
registered = -53;
semicolon = -76;
seven = 59;
six = -45;
t = -92;
trademark = 33;
v = -106;
w = -109;
x = -119;
zero = -45;
};
Z = {
W = -25;
g = -20;
j = -29;
p = -35;
t = -31;
v = -61;
w = -55;
x = -14;
};
a = {
T = -86;
V = -137;
W = -123;
asterisk = -33;
backslash = -119;
braceright = -51;
bracketright = -117;
parenright = -45;
question = -41;
t = -8;
trademark = -55;
v = -25;
w = -25;
};
ampersand = {
A = 100;
J = 96;
M = 12;
T = -70;
U = -39;
V = -104;
W = -94;
X = 37;
Y = -94;
Z = 27;
a = 14;
h = 45;
i = 14;
k = 45;
l = 45;
m = 14;
n = 14;
quotedbl = -109;
quotedblright = -82;
quoteright = -82;
quotesingle = -109;
r = 14;
v = -31;
w = -29;
x = 14;
y = -37;
z = 25;
};
asterisk = {
A = -104;
B = -16;
D = -16;
E = -16;
F = -16;
H = -16;
I = -16;
J = -82;
K = -16;
L = -16;
M = -18;
N = -16;
P = -16;
R = -16;
T = 55;
a = -23;
c = -20;
d = -31;
e = -20;
g = -29;
o = -20;
q = -31;
v = 20;
w = 16;
y = 20;
};
at = {
A = -25;
V = -70;
W = -66;
X = -23;
Y = -72;
quotedbl = -20;
quotedblright = -20;
quoteright = -20;
quotesingle = -20;
};
b = {
A = -31;
B = -49;
D = -49;
E = -49;
F = -49;
H = -49;
I = -49;
K = -49;
L = -49;
M = -47;
N = -49;
P = -49;
R = -49;
S = -14;
T = -92;
U = -57;
V = -156;
W = -133;
X = -92;
Y = -164;
Z = -37;
asterisk = -23;
backslash = -94;
braceright = -70;
bracketright = -123;
parenright = -63;
question = -39;
quotedbl = -61;
quotedblleft = -43;
quotedblright = -47;
quoteleft = -43;
quoteright = -47;
quotesingle = -61;
trademark = -45;
v = -8;
w = -8;
x = -12;
y = -8;
};
backslash = {
A = -35;
B = -61;
C = -137;
D = -61;
E = -61;
F = -61;
G = -137;
H = -61;
I = -61;
J = -45;
K = -61;
L = -61;
M = -59;
N = -61;
O = -137;
P = -61;
Q = -137;
R = -61;
S = -66;
T = -166;
U = -158;
V = -231;
W = -215;
X = -49;
Y = -195;
Z = -55;
a = -78;
b = -74;
c = -115;
d = -106;
e = -115;
eight = -98;
f = -63;
five = -84;
four = -102;
h = -49;
i = -59;
j = 209;
k = -49;
l = -49;
m = -63;
n = -63;
nine = -100;
o = -115;
one = -84;
q = -106;
quotedbl = -217;
quotedblright = -211;
quoteright = -211;
quotesingle = -193;
r = -63;
s = -68;
seven = -143;
six = -111;
t = -129;
three = -78;
two = -51;
u = -129;
v = -172;
w = -162;
x = -61;
z = -59;
zero = -127;
};
bar = {
j = 135;
};
braceleft = {
A = -53;
C = -53;
G = -53;
J = -35;
O = -53;
Q = -53;
S = -31;
T = 41;
U = 31;
V = 68;
W = 55;
X = 55;
Y = 76;
a = -59;
b = 80;
braceleft = -43;
c = -76;
d = -70;
e = -76;
eight = -43;
f = -37;
four = -59;
h = 35;
i = -25;
j = 250;
k = 35;
l = 35;
m = -53;
n = -53;
nine = -35;
o = -76;
one = -37;
parenleft = -43;
q = -70;
r = -53;
s = -57;
seven = 39;
six = -47;
t = -49;
three = -27;
u = -55;
v = -57;
w = -57;
x = -45;
z = -53;
zero = -49;
};
braceright = {
braceright = -43;
bracketright = -49;
parenright = -39;
};
bracketleft = {
A = -111;
C = -94;
G = -94;
J = -63;
O = -94;
Q = -94;
S = -51;
T = 47;
U = 39;
V = 76;
W = 63;
X = 63;
Y = 84;
a = -125;
b = 88;
braceleft = -49;
c = -127;
d = -123;
e = -127;
eight = -68;
f = -66;
four = -102;
h = 43;
i = -43;
j = 264;
k = 43;
l = 43;
m = -121;
n = -121;
nine = -59;
o = -127;
one = -74;
p = 20;
parenleft = -70;
q = -123;
r = -121;
s = -121;
seven = 47;
six = -84;
t = -111;
three = -47;
two = -43;
u = -121;
v = -125;
w = -125;
x = -113;
z = -119;
zero = -86;
};
c = {
J = 14;
M = -37;
T = -35;
V = -135;
W = -119;
X = -51;
backslash = -74;
braceright = -47;
bracketright = -113;
parenright = -45;
trademark = -33;
};
comma = {
T = -115;
V = -229;
W = -160;
j = -18;
p = -16;
quotedbl = -256;
quotedblleft = -254;
quotedblright = -254;
seven = -59;
t = -27;
v = -86;
w = -70;
zero = -31;
};
d = {
B = -16;
C = -27;
D = -16;
E = -16;
F = -16;
G = -27;
H = -16;
I = -16;
K = -16;
L = -16;
M = -14;
N = -16;
O = -27;
P = -16;
Q = -27;
R = -16;
S = -10;
T = -18;
U = -39;
V = -37;
W = -41;
Y = -33;
bracketright = -23;
emdash = -18;
endash = -18;
hyphen = -18;
j = -8;
p = -8;
t = -8;
uni00AD = -18;
v = -16;
w = -16;
y = -16;
};
degree = {
four = -59;
one = 33;
seven = 16;
};
e = {
M = -31;
T = -82;
V = -168;
W = -145;
X = -49;
asterisk = -16;
backslash = -94;
braceright = -63;
bracketright = -125;
parenright = -59;
question = -33;
trademark = -41;
};
eight = {
V = -27;
W = -29;
Y = -25;
braceright = -41;
bracketright = -61;
parenright = -37;
};
emdash = {
J = -119;
M = -47;
T = -129;
V = -106;
W = -94;
X = -125;
eight = -23;
one = -57;
seven = -121;
three = -41;
two = -59;
x = -25;
};
endash = {
J = -119;
M = -47;
T = -129;
V = -106;
W = -94;
X = -125;
eight = -23;
one = -57;
seven = -121;
three = -41;
two = -59;
x = -25;
};
equal = {
seven = -59;
};
exclamdown = {
U = -37;
V = -82;
W = -78;
Y = -82;
j = 150;
};
f = {
A = -14;
B = 102;
D = 102;
E = 102;
F = 102;
H = 102;
I = 102;
K = 102;
L = 102;
M = 96;
N = 102;
P = 102;
R = 102;
S = 31;
T = 164;
U = 152;
V = 188;
W = 178;
X = 176;
Y = 197;
Z = 102;
asterisk = 39;
b = 168;
backslash = 147;
bar = 80;
braceright = 182;
bracketright = 197;
c = -12;
d = -10;
e = -12;
emdash = -31;
endash = -31;
guilsinglleft = -25;
h = 123;
hyphen = -31;
j = 16;
k = 123;
l = 123;
o = -12;
parenright = 135;
q = -10;
question = 76;
quotedbl = 115;
quotedblleft = 86;
quotedblright = 160;
quoteleft = 86;
quoteright = 160;
quotesingle = 115;
trademark = 135;
uni00AD = -31;
v = 10;
};
five = {
four = 23;
};
four = {
T = -27;
V = -49;
W = -49;
Y = -45;
backslash = -27;
braceright = -39;
bracketright = -51;
degree = -33;
four = 20;
fraction = 18;
parenright = -35;
quotedbl = -33;
quotesingle = -33;
};
fraction = {
four = -98;
seven = 98;
six = -29;
zero = -27;
};
g = {
A = -31;
B = -14;
C = -10;
D = -14;
E = -14;
F = -14;
G = -10;
H = -14;
I = -14;
J = -31;
K = -14;
L = -14;
M = -14;
N = -14;
O = -10;
P = -14;
Q = -10;
R = -14;
S = 55;
T = 113;
U = -12;
W = -10;
Z = 51;
a = -12;
asterisk = 127;
b = 14;
bar = 20;
c = -14;
d = -14;
e = -14;
f = 10;
g = -14;
guilsinglright = 43;
h = -12;
j = 180;
k = -12;
l = -12;
o = -14;
q = -14;
question = 76;
quotedbl = 51;
quotedblleft = 78;
quoteleft = 78;
quotesingle = 51;
s = -12;
t = 39;
trademark = 82;
v = 61;
w = 55;
x = 31;
y = 61;
z = -8;
};
guilsinglleft = {
V = -51;
W = -51;
};
guilsinglright = {
J = -25;
M = -33;
T = -92;
V = -106;
W = -92;
X = -76;
x = -31;
};
h = {
M = -12;
T = -88;
V = -141;
W = -127;
asterisk = -37;
backslash = -123;
braceright = -57;
bracketright = -121;
j = -10;
p = -8;
parenright = -49;
question = -43;
seven = -100;
t = -12;
trademark = -59;
v = -31;
w = -29;
};
hyphen = {
J = -119;
M = -47;
T = -129;
V = -106;
W = -94;
X = -125;
eight = -23;
one = -57;
seven = -121;
three = -41;
two = -59;
x = -25;
};
i = {
M = -14;
T = -18;
V = -33;
W = -35;
asterisk = -16;
t = -8;
v = -14;
w = -14;
};
j = {
A = -14;
B = -23;
C = -10;
D = -23;
E = -23;
F = -23;
G = -10;
H = -23;
I = -23;
K = -23;
L = -23;
M = -23;
N = -23;
O = -10;
P = -23;
Q = -10;
R = -23;
S = -12;
U = -16;
V = -16;
W = -18;
Y = -18;
j = 57;
};
k = {
C = -53;
G = -53;
O = -53;
Q = -53;
U = -59;
V = -90;
W = -90;
Y = -109;
a = -8;
backslash = -45;
braceright = -39;
bracketright = -102;
c = -51;
d = -45;
e = -51;
emdash = -55;
endash = -55;
g = -20;
guilsinglleft = -43;
hyphen = -55;
o = -51;
parenright = -31;
q = -45;
trademark = -41;
uni00AD = -55;
};
l = {
M = -14;
T = -18;
V = -37;
W = -41;
bracketright = -23;
j = -8;
p = -8;
periodcentered = -127;
t = -8;
v = -16;
w = -16;
};
m = {
M = -12;
T = -88;
V = -141;
W = -127;
asterisk = -37;
backslash = -123;
braceright = -57;
bracketright = -121;
j = -10;
p = -8;
parenright = -49;
question = -43;
t = -12;
trademark = -59;
v = -31;
w = -29;
};
minus = {
eight = -20;
one = -53;
seven = -115;
three = -39;
two = -53;
};
n = {
M = -12;
T = -88;
V = -141;
W = -127;
asterisk = -37;
backslash = -123;
braceright = -57;
bracketright = -121;
j = -10;
p = -8;
parenright = -49;
question = -43;
t = -12;
trademark = -59;
v = -31;
w = -29;
};
nine = {
A = -39;
V = -29;
W = -29;
Y = -27;
braceright = -43;
bracketright = -70;
comma = -33;
ellipsis = -33;
fraction = -25;
parenright = -41;
quotedblbase = -33;
quotesinglbase = -33;
};
o = {
M = -51;
T = -94;
V = -162;
W = -137;
X = -92;
asterisk = -16;
backslash = -106;
braceright = -74;
bracketright = -127;
parenright = -68;
question = -41;
trademark = -41;
v = -12;
w = -14;
x = -16;
};
one = {
A = 18;
J = 23;
U = -20;
V = -35;
W = -37;
Y = -31;
braceright = -25;
bracketright = -39;
emdash = -31;
endash = -31;
fraction = 59;
hyphen = -31;
minus = -27;
parenright = -27;
periodcentered = -33;
plus = -20;
uni00AD = -31;
};
p = {
A = -33;
B = -49;
D = -49;
E = -49;
F = -49;
H = -49;
I = -49;
K = -49;
L = -49;
M = -49;
N = -49;
P = -49;
R = -49;
S = -16;
T = -92;
U = -57;
V = -158;
W = -133;
X = -90;
Y = -164;
Z = -37;
backslash = -100;
braceright = -74;
bracketright = -125;
h = -8;
k = -8;
l = -8;
parenright = -68;
question = -37;
quotedbl = -39;
quotedblleft = -29;
quotedblright = -35;
quoteleft = -29;
quoteright = -35;
quotesingle = -39;
trademark = -39;
v = -8;
w = -8;
x = -12;
y = -8;
};
parenleft = {
A = -47;
C = -47;
G = -47;
J = -35;
O = -47;
Q = -47;
S = -23;
V = 23;
W = 12;
X = 12;
Y = 33;
a = -57;
b = 70;
braceleft = -39;
c = -70;
d = -63;
e = -70;
eight = -39;
f = -33;
four = -51;
h = 25;
i = -25;
j = 209;
k = 25;
l = 25;
m = -47;
n = -47;
nine = -29;
o = -70;
parenleft = -41;
q = -63;
r = -47;
s = -51;
six = -43;
t = -43;
three = -23;
u = -49;
v = -49;
w = -49;
x = -39;
z = -45;
zero = -43;
};
parenright = {
braceright = -43;
bracketright = -70;
parenright = -41;
};
periodcentered = {
L = -47;
eight = -29;
l = -127;
one = -51;
seven = -119;
three = -45;
two = -55;
};
plus = {
one = -35;
seven = -72;
three = -20;
two = -37;
};
q = {
A = -14;
B = -35;
C = -10;
D = -35;
E = -35;
F = -35;
G = -10;
H = -35;
I = -35;
K = -35;
L = -35;
M = -35;
N = -35;
O = -10;
P = -35;
Q = -10;
R = -35;
S = -12;
T = -20;
U = -45;
V = -123;
W = -115;
X = -37;
Y = -125;
Z = -16;
backslash = -68;
braceright = 70;
bracketright = 78;
j = 260;
parenright = 59;
trademark = -20;
};
questiondown = {
C = -51;
G = -51;
O = -51;
Q = -51;
T = -68;
U = -82;
V = -152;
W = -141;
Y = -127;
a = -20;
c = -43;
d = -41;
e = -43;
j = 106;
o = -43;
q = -41;
t = -47;
u = -47;
v = -66;
w = -63;
y = -23;
};
quotedbl = {
J = -63;
ampersand = -31;
at = -41;
comma = -256;
ellipsis = -240;
four = -82;
g = -59;
quotedblbase = -260;
quotesinglbase = -256;
};
quotedblbase = {
T = -115;
V = -229;
W = -160;
j = 23;
p = -16;
quotedbl = -260;
quotedblleft = -240;
quotedblright = -240;
seven = -59;
t = -27;
v = -86;
w = -70;
zero = -31;
};
quotedblleft = {
J = -86;
T = 49;
V = 49;
comma = -246;
ellipsis = -240;
g = -35;
quotedblbase = -240;
quotesinglbase = -240;
v = 45;
w = 76;
x = 49;
};
quotedblright = {
J = -59;
V = 39;
W = 27;
X = 27;
ampersand = -31;
at = -45;
comma = -256;
ellipsis = -240;
g = -63;
quotedblbase = -240;
quotesinglbase = -240;
};
quoteleft = {
J = -86;
T = 49;
V = 49;
g = -35;
v = 45;
w = 76;
x = 49;
};
quoteright = {
J = -59;
V = 39;
W = 27;
X = 27;
ampersand = -31;
at = -45;
g = -63;
};
quotesinglbase = {
T = -115;
V = -229;
W = -160;
j = 23;
p = -16;
quotedbl = -256;
quotedblleft = -240;
quotedblright = -240;
seven = -59;
t = -27;
v = -86;
w = -70;
zero = -31;
};
quotesingle = {
J = -63;
ampersand = -31;
at = -41;
four = -82;
g = -59;
};
r = {
A = -113;
B = -76;
D = -76;
E = -76;
F = -76;
H = -76;
I = -76;
J = -135;
K = -76;
L = -76;
M = -76;
N = -76;
P = -76;
R = -76;
S = -14;
U = -45;
V = -82;
W = -80;
X = -111;
Y = -96;
Z = -20;
a = -10;
ampersand = -39;
b = -8;
backslash = -45;
braceright = -59;
bracketright = -129;
c = -16;
comma = -92;
d = -16;
e = -16;
ellipsis = -92;
g = -14;
guilsinglleft = -29;
h = -18;
k = -18;
l = -18;
o = -16;
parenright = -55;
q = -16;
quotedblbase = -92;
quotesinglbase = -92;
s = -8;
trademark = -20;
v = 23;
w = 16;
y = 27;
z = -8;
};
registered = {
A = -41;
B = -20;
D = -20;
E = -20;
F = -20;
H = -20;
I = -20;
K = -20;
L = -20;
M = -20;
N = -20;
P = -20;
R = -20;
V = -47;
W = -45;
X = -20;
Y = -45;
};
s = {
M = -31;
T = -20;
V = -104;
W = -104;
X = -41;
backslash = -68;
braceright = -59;
bracketright = -123;
parenright = -53;
trademark = -23;
};
seven = {
A = -86;
J = -43;
T = 27;
U = 10;
V = 47;
W = 39;
X = 39;
Y = 57;
backslash = 18;
braceright = 43;
bracketright = 53;
c = -76;
cent = -45;
comma = -129;
e = -76;
ellipsis = -129;
emdash = -43;
endash = -43;
four = -39;
fraction = -84;
hyphen = -43;
minus = -37;
numbersign = -20;
o = -76;
periodcentered = -37;
plus = -33;
quotedblbase = -129;
quotesinglbase = -129;
seven = 29;
uni00AD = -43;
z = -25;
};
six = {
A = -20;
V = -23;
W = -23;
Y = -20;
braceright = -39;
bracketright = -49;
parenright = -35;
};
t = {
A = 23;
B = -8;
C = -10;
D = -8;
E = -8;
F = -8;
G = -10;
H = -8;
I = -8;
J = 63;
K = -8;
L = -8;
N = -8;
O = -10;
P = -8;
Q = -10;
R = -8;
T = -29;
U = -51;
V = -102;
W = -102;
X = -10;
Y = -139;
ampersand = 27;
backslash = -68;
braceright = -43;
bracketright = -104;
emdash = -16;
endash = -16;
guilsinglleft = -29;
hyphen = -16;
parenright = -41;
quotedblright = -18;
quoteright = -18;
trademark = -43;
uni00AD = -16;
};
three = {
V = -29;
W = -29;
Y = -27;
braceright = -43;
bracketright = -61;
parenright = -39;
};
trademark = {
A = -84;
J = -74;
V = 20;
W = 10;
X = 10;
Y = 31;
b = 25;
};
two = {
braceright = -23;
bracketright = -47;
emdash = -33;
endash = -33;
fraction = 31;
hyphen = -33;
minus = -25;
periodcentered = -33;
uni00AD = -33;
};
u = {
M = -14;
T = -45;
V = -119;
W = -102;
asterisk = -16;
backslash = -86;
braceright = -55;
bracketright = -121;
parenright = -47;
question = -20;
t = -8;
trademark = -37;
v = -14;
w = -14;
};
uni00AD = {
J = -119;
M = -47;
T = -129;
V = -106;
W = -94;
X = -125;
eight = -23;
one = -57;
seven = -121;
three = -41;
two = -59;
x = -25;
};
v = {
A = -106;
B = -63;
D = -63;
E = -63;
F = -63;
H = -63;
I = -63;
J = -102;
K = -63;
L = -63;
M = -66;
N = -63;
P = -63;
R = -63;
U = -37;
V = -55;
W = -57;
X = -78;
Y = -63;
a = -8;
ampersand = -23;
asterisk = 23;
backslash = -31;
braceright = -55;
bracketright = -125;
c = -25;
comma = -88;
d = -18;
e = -25;
ellipsis = -88;
emdash = -20;
endash = -20;
g = -18;
guilsinglleft = -23;
h = -16;
hyphen = -20;
k = -16;
l = -16;
o = -25;
parenright = -49;
q = -18;
quotedblbase = -88;
quotedblleft = 49;
quoteleft = 49;
quotesinglbase = -88;
uni00AD = -20;
v = 41;
w = 31;
};
w = {
A = -104;
B = -63;
D = -63;
E = -63;
F = -63;
H = -63;
I = -63;
J = -92;
K = -63;
L = -63;
M = -66;
N = -63;
P = -63;
R = -63;
U = -37;
V = -55;
W = -57;
X = -78;
Y = -63;
a = -8;
ampersand = -20;
asterisk = 23;
backslash = -31;
braceright = -55;
bracketright = -125;
c = -20;
comma = -82;
d = -18;
e = -20;
ellipsis = -82;
emdash = -23;
endash = -23;
g = -18;
guilsinglleft = -23;
h = -16;
hyphen = -23;
k = -16;
l = -16;
o = -20;
parenright = -47;
q = -18;
quotedblbase = -82;
quotedblleft = 76;
quoteleft = 76;
quotesinglbase = -82;
uni00AD = -23;
v = 35;
};
x = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -8;
U = -74;
V = -94;
W = -92;
Y = -129;
backslash = -59;
braceright = -43;
bracketright = -113;
c = -29;
d = -25;
e = -29;
emdash = -45;
endash = -45;
g = -10;
guilsinglleft = -43;
hyphen = -45;
o = -29;
parenright = -37;
q = -25;
quotedblleft = -20;
quoteleft = -20;
trademark = -29;
uni00AD = -45;
v = -10;
};
y = {
J = -88;
M = -66;
V = -59;
W = -61;
X = -78;
ampersand = -20;
asterisk = 23;
backslash = -35;
braceright = -55;
bracketright = -119;
g = -18;
parenright = -49;
};
z = {
M = -20;
T = -12;
V = -96;
W = -96;
X = -14;
backslash = -63;
braceright = -53;
bracketright = -119;
parenright = -47;
t = -25;
trademark = -25;
v = -10;
};
zero = {
A = -41;
V = -37;
W = -37;
Y = -37;
backslash = -23;
braceright = -47;
bracketright = -82;
comma = -35;
ellipsis = -35;
fraction = -27;
parenright = -43;
quotedblbase = -35;
quotesinglbase = -35;
};
};
};
kerningRTL = {
m01 = {
uni0622 = {
uni06A9 = 120;
uni06AF = 120;
uniFB90 = 120;
uniFB94 = 120;
};
uni062F = {
uni06A9 = -120;
uni06AF = -120;
uniFB90 = -120;
uniFB94 = -120;
};
uni0630 = {
uni06A9 = -80;
uni06AF = -80;
uniFB90 = -80;
uniFB94 = -80;
};
uni0631 = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni06A9 = -213;
uni06AF = -235;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -135;
uniFB90 = -213;
uniFB94 = -235;
uniFE91 = -53;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -148;
};
uni0632 = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni0698 = -53;
uni06A9 = -213;
uni06AF = -213;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -148;
uniFB8A = -43;
uniFB90 = -213;
uniFB94 = -213;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -148;
};
uni066B = {
uni06F2 = -130;
uni06F3 = -130;
uni06F4 = -110;
};
uni066C = {
uni06F2 = -112;
uni06F3 = -128;
uni06F4 = -112;
};
uni0698 = {
uni0621 = -128;
uni0622 = -90;
uni0627 = -90;
uni0628 = -90;
uni0629 = -90;
uni062A = -90;
uni062B = -90;
uni062F = -90;
uni0630 = -90;
uni0631 = -43;
uni0632 = -43;
uni0633 = -90;
uni0634 = -90;
uni0635 = -90;
uni0636 = -90;
uni0637 = -90;
uni0638 = -90;
uni0641 = -90;
uni0642 = -43;
uni0643 = -90;
uni0644 = -43;
uni0645 = -90;
uni0646 = -43;
uni0647 = -128;
uni0648 = -43;
uni0649 = -43;
uni067E = -90;
uni06A9 = -160;
uni06C0 = -128;
uni06CC = -43;
uniFB58 = 20;
uniFB7C = -90;
uniFB8E = -160;
uniFB90 = -160;
uniFB92 = -160;
uniFB94 = -160;
uniFE93 = -90;
uniFE97 = -90;
uniFE99 = -90;
uniFE9B = -111;
uniFE9F = -90;
uniFEA3 = -90;
uniFEA7 = -90;
uniFEB3 = -90;
uniFEB7 = -90;
uniFEBB = -90;
uniFEBF = -90;
uniFEC3 = -90;
uniFEC7 = -90;
uniFECB = -90;
uniFECF = -90;
uniFED3 = -90;
uniFED7 = -90;
uniFED9 = -90;
uniFEDB = -160;
uniFEDF = -90;
uniFEE3 = -90;
uniFEE7 = -90;
uniFEEB = -90;
uniFEFB = -90;
};
uni06F0 = {
uni06F2 = -40;
uni06F3 = -40;
uni06F4 = -40;
uni06F6 = -40;
uni06F7 = -40;
uni06F8 = -40;
};
uni06F1 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F2 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F3 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F4 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F5 = {
uni06F0 = -30;
uni06F2 = -100;
uni06F3 = -100;
uni06F4 = -70;
uni06F6 = -70;
uni06F7 = -70;
};
uni06F7 = {
uni06F0 = -70;
uni06F1 = -70;
uni06F5 = -70;
uni06F8 = -100;
uni06F9 = -70;
};
uni06F8 = {
uni06F0 = -70;
uni06F2 = -100;
uni06F3 = -100;
uni06F4 = -70;
uni06F6 = -70;
uni06F7 = -100;
};
uni06F9 = {
uni06F1 = -70;
uni06F5 = -70;
uni06F8 = -70;
uni06F9 = -70;
};
uniFB8B = {
uni0621 = -128;
uni0622 = -90;
uni0627 = -90;
uni0628 = -90;
uni0629 = -90;
uni062A = -90;
uni062B = -90;
uni062F = -90;
uni0630 = -90;
uni0631 = -43;
uni0632 = -43;
uni0633 = -90;
uni0634 = -90;
uni0635 = -90;
uni0636 = -90;
uni0637 = -90;
uni0638 = -90;
uni0641 = -90;
uni0642 = -43;
uni0643 = -90;
uni0644 = -43;
uni0645 = -90;
uni0646 = -43;
uni0647 = -128;
uni0648 = -43;
uni0649 = -43;
uni067E = -90;
uni0698 = -43;
uni06A9 = -160;
uni06AF = -160;
uni06C0 = -128;
uni06CC = -43;
uniFB58 = 20;
uniFB7C = -90;
uniFB8E = -160;
uniFB90 = -160;
uniFB92 = -160;
uniFB94 = -160;
uniFE91 = -53;
uniFE93 = -90;
uniFE97 = -90;
uniFE99 = -90;
uniFE9B = -90;
uniFE9F = -90;
uniFEA3 = -90;
uniFEA7 = -90;
uniFEB3 = -90;
uniFEB7 = -90;
uniFEBB = -90;
uniFEBF = -90;
uniFEC3 = -90;
uniFEC7 = -90;
uniFECB = -90;
uniFECF = -90;
uniFED3 = -90;
uniFED7 = -90;
uniFED9 = -90;
uniFEDB = -160;
uniFEDF = -90;
uniFEE3 = -128;
uniFEE7 = -90;
uniFEEB = -90;
uniFEFB = -90;
};
uniFEAA = {
uni06A9 = -120;
uni06AF = -120;
uniFB90 = -120;
uniFB94 = -120;
};
uniFEAC = {
uni06A9 = -120;
uni06AF = -120;
uniFB90 = -120;
uniFB94 = -120;
};
uniFEAE = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni0698 = -43;
uni06A9 = -213;
uni06AF = -235;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -148;
uniFB8A = -43;
uniFB90 = -213;
uniFB94 = -235;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -148;
};
uniFEB0 = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni0698 = -43;
uni06A9 = -213;
uni06AF = -213;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -148;
uniFB8A = -43;
uniFB90 = -213;
uniFB94 = -213;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -128;
};
};
"01037D14-118B-4CC1-B98A-141C2A413BDA" = {
uni0622 = {
uni06A9 = 120;
uni06AF = 120;
uniFB90 = 120;
uniFB94 = 120;
};
uni062F = {
uni06A9 = -120;
uni06AF = -120;
uniFB90 = -120;
uniFB94 = -120;
};
uni0630 = {
uni06A9 = -80;
uni06AF = -80;
uniFB90 = -80;
uniFB94 = -80;
};
uni0631 = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni06A9 = -213;
uni06AF = -235;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -135;
uniFB90 = -213;
uniFB94 = -235;
uniFE91 = -53;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -148;
};
uni0632 = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni0698 = -53;
uni06A9 = -213;
uni06AF = -213;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -148;
uniFB8A = -43;
uniFB90 = -213;
uniFB94 = -213;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -148;
};
uni066B = {
uni06F2 = -130;
uni06F3 = -130;
uni06F4 = -110;
};
uni066C = {
uni06F2 = -112;
uni06F3 = -128;
uni06F4 = -112;
};
uni0698 = {
uni0621 = -128;
uni0622 = -90;
uni0627 = -90;
uni0628 = -90;
uni0629 = -90;
uni062A = -90;
uni062B = -90;
uni062F = -90;
uni0630 = -90;
uni0631 = -43;
uni0632 = -43;
uni0633 = -90;
uni0634 = -90;
uni0635 = -90;
uni0636 = -90;
uni0637 = -90;
uni0638 = -90;
uni0641 = -90;
uni0642 = -43;
uni0643 = -90;
uni0644 = -43;
uni0645 = -90;
uni0646 = -43;
uni0647 = -128;
uni0648 = -43;
uni0649 = -43;
uni067E = -90;
uni06A9 = -160;
uni06C0 = -128;
uni06CC = -43;
uniFB58 = 20;
uniFB7C = -90;
uniFB8E = -160;
uniFB90 = -160;
uniFB92 = -160;
uniFB94 = -160;
uniFE93 = -90;
uniFE97 = -90;
uniFE99 = -90;
uniFE9B = -111;
uniFE9F = -90;
uniFEA3 = -90;
uniFEA7 = -90;
uniFEB3 = -90;
uniFEB7 = -90;
uniFEBB = -90;
uniFEBF = -90;
uniFEC3 = -90;
uniFEC7 = -90;
uniFECB = -90;
uniFECF = -90;
uniFED3 = -90;
uniFED7 = -90;
uniFED9 = -90;
uniFEDB = -160;
uniFEDF = -90;
uniFEE3 = -90;
uniFEE7 = -90;
uniFEEB = -90;
uniFEFB = -90;
};
uni06F0 = {
uni06F2 = -40;
uni06F3 = -40;
uni06F4 = -40;
uni06F6 = -40;
uni06F7 = -40;
uni06F8 = -40;
};
uni06F1 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F2 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F3 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F4 = {
uni06F5 = -70;
uni06F8 = -70;
};
uni06F5 = {
uni06F0 = -30;
uni06F2 = -100;
uni06F3 = -100;
uni06F4 = -70;
uni06F6 = -70;
uni06F7 = -70;
};
uni06F7 = {
uni06F0 = -70;
uni06F1 = -70;
uni06F5 = -70;
uni06F8 = -100;
uni06F9 = -70;
};
uni06F8 = {
uni06F0 = -70;
uni06F2 = -100;
uni06F3 = -100;
uni06F4 = -70;
uni06F6 = -70;
uni06F7 = -100;
};
uni06F9 = {
uni06F1 = -70;
uni06F5 = -70;
uni06F8 = -70;
uni06F9 = -70;
};
uniFB8B = {
uni0621 = -128;
uni0622 = -90;
uni0627 = -90;
uni0628 = -90;
uni0629 = -90;
uni062A = -90;
uni062B = -90;
uni062F = -90;
uni0630 = -90;
uni0631 = -43;
uni0632 = -43;
uni0633 = -90;
uni0634 = -90;
uni0635 = -90;
uni0636 = -90;
uni0637 = -90;
uni0638 = -90;
uni0641 = -90;
uni0642 = -43;
uni0643 = -90;
uni0644 = -43;
uni0645 = -90;
uni0646 = -43;
uni0647 = -128;
uni0648 = -43;
uni0649 = -43;
uni067E = -90;
uni0698 = -43;
uni06A9 = -160;
uni06AF = -160;
uni06C0 = -128;
uni06CC = -43;
uniFB58 = 20;
uniFB7C = -90;
uniFB8E = -160;
uniFB90 = -160;
uniFB92 = -160;
uniFB94 = -160;
uniFE91 = -53;
uniFE93 = -90;
uniFE97 = -90;
uniFE99 = -90;
uniFE9B = -90;
uniFE9F = -90;
uniFEA3 = -90;
uniFEA7 = -90;
uniFEB3 = -90;
uniFEB7 = -90;
uniFEBB = -90;
uniFEBF = -90;
uniFEC3 = -90;
uniFEC7 = -90;
uniFECB = -90;
uniFECF = -90;
uniFED3 = -90;
uniFED7 = -90;
uniFED9 = -90;
uniFEDB = -160;
uniFEDF = -90;
uniFEE3 = -128;
uniFEE7 = -90;
uniFEEB = -90;
uniFEFB = -90;
};
uniFEAA = {
uni06A9 = -120;
uni06AF = -120;
uniFB90 = -120;
uniFB94 = -120;
};
uniFEAC = {
uni06A9 = -120;
uni06AF = -120;
uniFB90 = -120;
uniFB94 = -120;
};
uniFEAE = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni0698 = -43;
uni06A9 = -213;
uni06AF = -235;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -148;
uniFB8A = -43;
uniFB90 = -213;
uniFB94 = -235;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -148;
};
uniFEB0 = {
uni0621 = -128;
uni0622 = -148;
uni0627 = -148;
uni0628 = -148;
uni0629 = -148;
uni062A = -148;
uni062B = -148;
uni062F = -148;
uni0630 = -148;
uni0631 = -43;
uni0632 = -43;
uni0633 = -148;
uni0634 = -148;
uni0635 = -148;
uni0636 = -148;
uni0637 = -148;
uni0638 = -148;
uni0641 = -148;
uni0642 = -43;
uni0644 = -43;
uni0645 = -148;
uni0647 = -148;
uni0648 = -43;
uni0649 = -43;
uni067E = -148;
uni0698 = -43;
uni06A9 = -213;
uni06AF = -213;
uni06C0 = -128;
uni06CC = -43;
uniFB56 = -148;
uniFB58 = 20;
uniFB7C = -148;
uniFB8A = -43;
uniFB90 = -213;
uniFB94 = -213;
uniFE97 = -148;
uniFE9B = -148;
uniFE9F = -148;
uniFEA3 = -148;
uniFEA7 = -148;
uniFEB3 = -148;
uniFEB7 = -148;
uniFEBB = -148;
uniFEBF = -148;
uniFEC3 = -148;
uniFEC7 = -148;
uniFECB = -148;
uniFECF = -148;
uniFED3 = -148;
uniFED7 = -148;
uniFEDB = -213;
uniFEDF = -148;
uniFEE3 = -148;
uniFEE7 = -148;
uniFEEB = -128;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright (c) 2016 by Saber Rastikerdar. All Rights Reserved.
Based on DejaVu font.
Non-Arabic(Latin) glyphs and data are imported from Lora font under the Open Font License.";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Parastoo;
}
);
},
{
key = licenses;
values = (
{
language = ENG;
value = "SIL Open Font License 1.1
Copyright (c) 2016 by Saber Rastikerdar. All Rights Reserved.";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL_web";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Saber Rastikerdar (saber.rastikerdar@gmail.com)";
}
);
},
{
key = sampleTexts;
values = (
{
language = ENG;
value = "      .";
},
{
language = ARA;
value = "این یک مثال برای نمایش فونت می‌باشد.";
}
);
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 2048;
versionMajor = 2;
versionMinor = 0;
}
